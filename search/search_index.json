{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MichaelBot's documentation Table of Contents Introduction Convention Parameters Prefix User/Member Concept Permissions Cooldown Introduction This is the official documentation for MichaelBot. This can be used as a developer documentation or user documentation. If you want to invite the bot, you won't be able to, yet. You can however, ask MikeJollie#1067 to invite the bot via MichaelBot support server . The source of the bot is available publicly on GitHub . Convention The conventions in this document should be relatively straightforward. The conventions uses in help is a bit less clear, due to not having enough spaces. These are the conventions I use in the help command: Parameters These are the parameter types you will find in help and in Simplified Signature section later. <parameter> : Required parameter. The bot will raise error without this parameter . [parameter] : Optional parameter. The bot can still works without this parameter . <param1/param2/...> or [param1/param2/...] : You can provide either param style. If the parameter has space, use \"double quotes\" to make it a param. Example: if it's profile [mention/ID/name/nickname] and the name is Hello World then you will use profile \"Hello World\" . <member> or <user> or <channel> or <guild> : Discord related argument. It is the equivalent of <ID/discrimination/mention/name/nickname> . Prefix This document will assume you know how to use a command using <prefix><command_name> . If you don't know the prefix of the bot, use the bot's mention as the prefix (not recommended). The default prefix is $ but no it doesn't have $sudo. User/Member Concept User/Member are usually confused terms for a Discord user, but here are the difference. When this document refers to \"user\" , it refers to a Discord user regardless of the server . When this document refers to \"member\" , it refers to a Discord user in a certain server(s) . Note that Discord API doesn't allow bot to get information about a user/member if the bot does not see the user/member , which means the bot needs to share at least 1 server with the user/member to actually work. Permissions The convention for permissions in help is as follow: You need : The required permission you need to have to execute the command. I need : The required permission the bot need to have to execute the command. I will assume the bot always has Send Messages and Read Messages in the channel you use the command. Cooldown The convention for cooldown syntax in help is x seconds per n use(s) (cooldown type) . x : The cooldown duration before you can use the command. n : The number of times the command is used before invoking the cooldown. cooldown type : There are usually 4 types of cooldown in this bot: global : The cooldown applies to every servers the bot joins. Example: If a person invokes prefix n times, no one can invoke prefix again until x seconds are passed. guild : The cooldown applies to everyone in a certain server . Example: If a person invokes kick n times, no one in that person's server can invoke kick again until x seconds are passed. user : The cooldown applies to that certain user . Example: If the user MikeJollie invoke embed_simple n times, that certain user can not invoke embed_simple again until x seconds are passed. member : The cooldown applies to that certain member . Example: If the member MikeJollie invoke test n times, that certain member can not invoke MikeJollie in the same server he invoked again until x seconds are passed. He can invoke the command in a different server in that duration however . This document is last reviewed on Nov 6th (PT) by MikeJollie#1067","title":"Home"},{"location":"#welcome-to-michaelbots-documentation","text":"","title":"Welcome to MichaelBot's documentation"},{"location":"#table-of-contents","text":"Introduction Convention Parameters Prefix User/Member Concept Permissions Cooldown","title":"Table of Contents"},{"location":"#introduction","text":"This is the official documentation for MichaelBot. This can be used as a developer documentation or user documentation. If you want to invite the bot, you won't be able to, yet. You can however, ask MikeJollie#1067 to invite the bot via MichaelBot support server . The source of the bot is available publicly on GitHub .","title":"Introduction"},{"location":"#convention","text":"The conventions in this document should be relatively straightforward. The conventions uses in help is a bit less clear, due to not having enough spaces. These are the conventions I use in the help command:","title":"Convention"},{"location":"#parameters","text":"These are the parameter types you will find in help and in Simplified Signature section later. <parameter> : Required parameter. The bot will raise error without this parameter . [parameter] : Optional parameter. The bot can still works without this parameter . <param1/param2/...> or [param1/param2/...] : You can provide either param style. If the parameter has space, use \"double quotes\" to make it a param. Example: if it's profile [mention/ID/name/nickname] and the name is Hello World then you will use profile \"Hello World\" . <member> or <user> or <channel> or <guild> : Discord related argument. It is the equivalent of <ID/discrimination/mention/name/nickname> .","title":"Parameters"},{"location":"#prefix","text":"This document will assume you know how to use a command using <prefix><command_name> . If you don't know the prefix of the bot, use the bot's mention as the prefix (not recommended). The default prefix is $ but no it doesn't have $sudo.","title":"Prefix"},{"location":"#usermember-concept","text":"User/Member are usually confused terms for a Discord user, but here are the difference. When this document refers to \"user\" , it refers to a Discord user regardless of the server . When this document refers to \"member\" , it refers to a Discord user in a certain server(s) . Note that Discord API doesn't allow bot to get information about a user/member if the bot does not see the user/member , which means the bot needs to share at least 1 server with the user/member to actually work.","title":"User/Member Concept"},{"location":"#permissions","text":"The convention for permissions in help is as follow: You need : The required permission you need to have to execute the command. I need : The required permission the bot need to have to execute the command. I will assume the bot always has Send Messages and Read Messages in the channel you use the command.","title":"Permissions"},{"location":"#cooldown","text":"The convention for cooldown syntax in help is x seconds per n use(s) (cooldown type) . x : The cooldown duration before you can use the command. n : The number of times the command is used before invoking the cooldown. cooldown type : There are usually 4 types of cooldown in this bot: global : The cooldown applies to every servers the bot joins. Example: If a person invokes prefix n times, no one can invoke prefix again until x seconds are passed. guild : The cooldown applies to everyone in a certain server . Example: If a person invokes kick n times, no one in that person's server can invoke kick again until x seconds are passed. user : The cooldown applies to that certain user . Example: If the user MikeJollie invoke embed_simple n times, that certain user can not invoke embed_simple again until x seconds are passed. member : The cooldown applies to that certain member . Example: If the member MikeJollie invoke test n times, that certain member can not invoke MikeJollie in the same server he invoked again until x seconds are passed. He can invoke the command in a different server in that duration however . This document is last reviewed on Nov 6th (PT) by MikeJollie#1067","title":"Cooldown"},{"location":"installation/","text":"Installation I'd prefer you not to clone this to develop your own bot. The code here is for educational purpose. Nevertheless, I'll still provide you the installation steps. Table of Contents Prerequisite Steps Alternative Prerequisite It's recommended that you either use Linux or WSL (no idea what this is, but it sounds like Linux inside Windows). Windows instruction is also here, but it might be a bit lengthy. You need git and python3 (on Windows, it's py -3 ). You should also install pip and virtualenv under python3 . If you don't know how, what's the point of Google? You need PostgreSQL installed and setup (it's pretty complex, and I'm planning to make this optional). Steps Clone this directory. git clone https://github.com/MikeJollie2707/MichaelBot.git Go into folder setup and create two json files (here I use bot.json and db.json ) (I'm planning to merge these two files into one). // bot.json { \"token\": \"bot token\" } // db.json { \"host\": \"localhost or wherever you host PostgreSQL\", \"user\": \"username\", \"database\": \"name of the database\", \"password\": \"password\" } In setup , there should also be a config.json file. Open it and fill in necessary information. You can use my bot as the template. // config.json { \"BotIndex\": { \"name\": \"Undecided if optional or not\", \"version\": \"Required\", \"description\": \"Required\", \"prefix\": \"Required\", \"debug\": false, // Optional key. \"token\": \"bot.json\", // The file contain the token \"db\": \"db.json\" // The file contain the db info } } Next, setup a virtual environment and install the required packages. # Linux python3 -m virtualenv venv source venv/bin/activate python3 -m pip install -r requirement.txt # Windows py -3 -m virtualenv venv # py -3 will still somehow use the global python interpreter, # so for now this is the only way .\\venv\\Scripts\\python.exe -m pip install -r requirement.txt Finally, run the bot. # Linux python3 bot.py BotIndex # Windows .\\venv\\Scripts\\python.exe bot.py BotIndex Alternative Alternatively, if you don't like typing python3 bot.py BotIndex all the time when you want to start the bot, there's a script startup.sh (for Linux) and run.ps1 (for Windows Powershell) to make life a bit easier. For startup.sh , you can edit MICHAEL_DIR to your current directory. An absolute path is needed if you plan to put the file to one of the startup application. Mark it executable, and just double click it the next time you want to run. Remember to change the bot index also (I'm planning to make this more obvious). <<<<<<< HEAD For run.ps1 , just change the $BotIndex , and then open Powershell, run the script using . \".\\run.ps1\" ======= For run.ps1 , just change the $BotIndex , and then open Powershell, run the script using . \".\\run.ps1\" 1e81819134529afbdd2edcb50504f7d9672ce1c1","title":"Installation"},{"location":"installation/#installation","text":"I'd prefer you not to clone this to develop your own bot. The code here is for educational purpose. Nevertheless, I'll still provide you the installation steps.","title":"Installation"},{"location":"installation/#table-of-contents","text":"Prerequisite Steps Alternative","title":"Table of Contents"},{"location":"installation/#prerequisite","text":"It's recommended that you either use Linux or WSL (no idea what this is, but it sounds like Linux inside Windows). Windows instruction is also here, but it might be a bit lengthy. You need git and python3 (on Windows, it's py -3 ). You should also install pip and virtualenv under python3 . If you don't know how, what's the point of Google? You need PostgreSQL installed and setup (it's pretty complex, and I'm planning to make this optional).","title":"Prerequisite"},{"location":"installation/#steps","text":"Clone this directory. git clone https://github.com/MikeJollie2707/MichaelBot.git Go into folder setup and create two json files (here I use bot.json and db.json ) (I'm planning to merge these two files into one). // bot.json { \"token\": \"bot token\" } // db.json { \"host\": \"localhost or wherever you host PostgreSQL\", \"user\": \"username\", \"database\": \"name of the database\", \"password\": \"password\" } In setup , there should also be a config.json file. Open it and fill in necessary information. You can use my bot as the template. // config.json { \"BotIndex\": { \"name\": \"Undecided if optional or not\", \"version\": \"Required\", \"description\": \"Required\", \"prefix\": \"Required\", \"debug\": false, // Optional key. \"token\": \"bot.json\", // The file contain the token \"db\": \"db.json\" // The file contain the db info } } Next, setup a virtual environment and install the required packages. # Linux python3 -m virtualenv venv source venv/bin/activate python3 -m pip install -r requirement.txt # Windows py -3 -m virtualenv venv # py -3 will still somehow use the global python interpreter, # so for now this is the only way .\\venv\\Scripts\\python.exe -m pip install -r requirement.txt Finally, run the bot. # Linux python3 bot.py BotIndex # Windows .\\venv\\Scripts\\python.exe bot.py BotIndex","title":"Steps"},{"location":"installation/#alternative","text":"Alternatively, if you don't like typing python3 bot.py BotIndex all the time when you want to start the bot, there's a script startup.sh (for Linux) and run.ps1 (for Windows Powershell) to make life a bit easier. For startup.sh , you can edit MICHAEL_DIR to your current directory. An absolute path is needed if you plan to put the file to one of the startup application. Mark it executable, and just double click it the next time you want to run. Remember to change the bot index also (I'm planning to make this more obvious). <<<<<<< HEAD For run.ps1 , just change the $BotIndex , and then open Powershell, run the script using . \".\\run.ps1\" ======= For run.ps1 , just change the $BotIndex , and then open Powershell, run the script using . \".\\run.ps1\" 1e81819134529afbdd2edcb50504f7d9672ce1c1","title":"Alternative"},{"location":"zutil/","text":"Label templates Copy the text according to the label. Table of Contents [DEPRECATED] [INTERNAL] [INCOMPLETE] [OUTDATED] [EXPERIMENT] [BETA] [DEVELOPING] [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. [INCOMPLETE] This section is labeled as [INCOMPLETE], will be updated in the future. [OUTDATED] This section is labeled as [OUTDATED], will be updated in the future. [EXPERIMENT] This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. [BETA] This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available. [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing.","title":"Zutil"},{"location":"zutil/#label-templates","text":"Copy the text according to the label.","title":"Label templates"},{"location":"zutil/#table-of-contents","text":"[DEPRECATED] [INTERNAL] [INCOMPLETE] [OUTDATED] [EXPERIMENT] [BETA] [DEVELOPING]","title":"Table of Contents"},{"location":"zutil/#deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future.","title":"[DEPRECATED]"},{"location":"zutil/#internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose.","title":"[INTERNAL]"},{"location":"zutil/#incomplete","text":"This section is labeled as [INCOMPLETE], will be updated in the future.","title":"[INCOMPLETE]"},{"location":"zutil/#outdated","text":"This section is labeled as [OUTDATED], will be updated in the future.","title":"[OUTDATED]"},{"location":"zutil/#experiment","text":"This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available.","title":"[EXPERIMENT]"},{"location":"zutil/#beta","text":"This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available.","title":"[BETA]"},{"location":"zutil/#developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing.","title":"[DEVELOPING]"},{"location":"commands/core/","text":"Core commands Table of Contents __init__ [INTERNAL] cog_check [INTERNAL] changelog changelog dev help help-all info note prefix [DEPRECATED] profile report serverinfo These are commands that are mostly related to information. __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \u2699\ufe0f . cog_check [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if ctx is in private DM or not, and will raise NoPrivateMessage() exception if it is. changelog Show the latest 10 changes of the bot. Usage: {prefix}changelog Example: $changelog You need: None. The bot need: Read Message History , Add Reactions , Send Messages . Subcommands: dev changelog dev Show the latest 10 changes of the bot behind the scene . Usage: {prefix}changelog dev Example: $changelog dev You need: None. The bot need: Read Message History , Add Reactions , Send Messages . help Show compact help about a command, or a category. Note: command name and category name is case sensitive; Core is different from core . Usage: <prefix>help [command/category] Parameters: command/category : The category's name or the command's name or the command's aliases. This also includes subcommand. Examples: Example 1: $help Core Example 2: $help info Example 3: $help changelog dev You need: None. The bot need: Read Message History , Add Reactions , Send Messages . help-all Show help about the bot, a command, or a category. Note: command name and category name is case sensitive; Core is different from core. Usage: <prefix>help-all [command/category] Parameters: category/command : The category's name or the command's name or the command's aliases. Examples: Example 1: $help-all Core Example 2: $help-all info Example 3: $help-all You need: None. The bot need: Read Message History , Add Reactions , Send Messages . info Provide information about the bot. Usage: <prefix>info Example: $info You need: None. The bot need: Send Messages . note [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. Provide syntax convention for help and help-all . All it does is putting a link to this documentation. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def note(self, ctx): Simplified Signature: note Example: note Expected Output: an embed with a link prefix [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. View and set the prefix for the bot. Full Signature: @commands.command() @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def prefix(self, ctx, new_prefix : str = None): Simplified Signature: prefix [new_prefix] Parameters: new_prefix : The new prefix for the bot. I recommend to set it 1-4 characters with no spaces. Example: $prefix ! Expected Output: New prefix: ! profile Provide information about you or another member. Usage: <prefix>profile [member] Parameter: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] Examples: Example 1: $profile 472832990012243969 (recommended if you turn Developer Mode on) Example 2: $profile MikeJollie#1067 (recommended for normal uses) Example 3: $profile You need: None. The bot need: Send Messages . report Report a bug or suggest new features for the bot. Usage: <prefix>report <report_type> <content> Parameters: report_type : Either report or suggest , based on your need. It is recommended to use the correct label for the report/suggestion to be easily viewed. content : The report/suggestion. Cooldown: 30 seconds per use (user) Examples: Example 1: $report report The command xyz raise error (full error here...) Example 2: $report suggest The command profile should have this feature (feature here...) You need: None. The bot need: Manage Messages , Send Messages . serverinfo Provide information about the server that invoke the command. Aliases: server-info Usage: <prefix>serverinfo Example: $serverinfo You need: None. The bot need: Send Messages . This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"Core"},{"location":"commands/core/#core-commands","text":"","title":"Core commands"},{"location":"commands/core/#table-of-contents","text":"__init__ [INTERNAL] cog_check [INTERNAL] changelog changelog dev help help-all info note prefix [DEPRECATED] profile report serverinfo These are commands that are mostly related to information.","title":"Table of Contents"},{"location":"commands/core/#__init__-internal","text":"This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \u2699\ufe0f .","title":"__init__ [INTERNAL]"},{"location":"commands/core/#cog_check-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if ctx is in private DM or not, and will raise NoPrivateMessage() exception if it is.","title":"cog_check [INTERNAL]"},{"location":"commands/core/#changelog","text":"Show the latest 10 changes of the bot. Usage: {prefix}changelog Example: $changelog You need: None. The bot need: Read Message History , Add Reactions , Send Messages . Subcommands: dev","title":"changelog"},{"location":"commands/core/#changelog-dev","text":"Show the latest 10 changes of the bot behind the scene . Usage: {prefix}changelog dev Example: $changelog dev You need: None. The bot need: Read Message History , Add Reactions , Send Messages .","title":"changelog dev"},{"location":"commands/core/#help","text":"Show compact help about a command, or a category. Note: command name and category name is case sensitive; Core is different from core . Usage: <prefix>help [command/category] Parameters: command/category : The category's name or the command's name or the command's aliases. This also includes subcommand. Examples: Example 1: $help Core Example 2: $help info Example 3: $help changelog dev You need: None. The bot need: Read Message History , Add Reactions , Send Messages .","title":"help"},{"location":"commands/core/#help-all","text":"Show help about the bot, a command, or a category. Note: command name and category name is case sensitive; Core is different from core. Usage: <prefix>help-all [command/category] Parameters: category/command : The category's name or the command's name or the command's aliases. Examples: Example 1: $help-all Core Example 2: $help-all info Example 3: $help-all You need: None. The bot need: Read Message History , Add Reactions , Send Messages .","title":"help-all"},{"location":"commands/core/#info","text":"Provide information about the bot. Usage: <prefix>info Example: $info You need: None. The bot need: Send Messages .","title":"info"},{"location":"commands/core/#note-deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. Provide syntax convention for help and help-all . All it does is putting a link to this documentation. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def note(self, ctx): Simplified Signature: note Example: note Expected Output: an embed with a link","title":"note [DEPRECATED]"},{"location":"commands/core/#prefix-deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. View and set the prefix for the bot. Full Signature: @commands.command() @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def prefix(self, ctx, new_prefix : str = None): Simplified Signature: prefix [new_prefix] Parameters: new_prefix : The new prefix for the bot. I recommend to set it 1-4 characters with no spaces. Example: $prefix ! Expected Output: New prefix: !","title":"prefix [DEPRECATED]"},{"location":"commands/core/#profile","text":"Provide information about you or another member. Usage: <prefix>profile [member] Parameter: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] Examples: Example 1: $profile 472832990012243969 (recommended if you turn Developer Mode on) Example 2: $profile MikeJollie#1067 (recommended for normal uses) Example 3: $profile You need: None. The bot need: Send Messages .","title":"profile"},{"location":"commands/core/#report","text":"Report a bug or suggest new features for the bot. Usage: <prefix>report <report_type> <content> Parameters: report_type : Either report or suggest , based on your need. It is recommended to use the correct label for the report/suggestion to be easily viewed. content : The report/suggestion. Cooldown: 30 seconds per use (user) Examples: Example 1: $report report The command xyz raise error (full error here...) Example 2: $report suggest The command profile should have this feature (feature here...) You need: None. The bot need: Manage Messages , Send Messages .","title":"report"},{"location":"commands/core/#serverinfo","text":"Provide information about the server that invoke the command. Aliases: server-info Usage: <prefix>serverinfo Example: $serverinfo You need: None. The bot need: Send Messages . This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"serverinfo"},{"location":"commands/currency/","text":"Currency commands [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. These are commands that involve fake economy. Table of Contents __init__ [INTERNAL] daily [BETA] addmoney [EXPERIMENT] rmvmoney [DEVELOPING] balance [BETA] __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor for this category. This set the Currency category's emoji is \ud83d\udcb2 . daily [BETA] This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available. Get an amount of money every 24h. Usage: <prefix>daily Cooldown: 10 seconds per 1 use (user) Example: $daily You need: None. The bot need: Send Messages . addmoney [EXPERIMENT] This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. Usage: <prefix>addmoney <amount> <member> Parameter: amount : The amount of money you want to add. member : The member you want to add the money. Example: $addmoney 1000 MikeJollie You need: None, for now. The bot need: Send Messages . rmvmoney [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. Usage: <prefix>rmvmoney <amount> <member> Parameter: amount : The amount of money you want to remove. If larger than the member's actual money, the money remain will be 0. member : The member you want to remove the money. Example: $rmvmoney 1000 MikeJollie You need: None, for now. The bot need: Send Messages . balance [BETA] This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available. Display the amount of money you currently have. Usage: <prefix>balance Cooldown: 2 seconds per 1 use (user) Example: $balance You need: None. The bot need: Send Messages . This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"Currency"},{"location":"commands/currency/#currency-commands-developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. These are commands that involve fake economy.","title":"Currency commands [DEVELOPING]"},{"location":"commands/currency/#table-of-contents","text":"__init__ [INTERNAL] daily [BETA] addmoney [EXPERIMENT] rmvmoney [DEVELOPING] balance [BETA]","title":"Table of Contents"},{"location":"commands/currency/#__init__-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor for this category. This set the Currency category's emoji is \ud83d\udcb2 .","title":"__init__ [INTERNAL]"},{"location":"commands/currency/#daily-beta","text":"This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available. Get an amount of money every 24h. Usage: <prefix>daily Cooldown: 10 seconds per 1 use (user) Example: $daily You need: None. The bot need: Send Messages .","title":"daily [BETA]"},{"location":"commands/currency/#addmoney-experiment","text":"This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. Usage: <prefix>addmoney <amount> <member> Parameter: amount : The amount of money you want to add. member : The member you want to add the money. Example: $addmoney 1000 MikeJollie You need: None, for now. The bot need: Send Messages .","title":"addmoney [EXPERIMENT]"},{"location":"commands/currency/#rmvmoney-developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. Usage: <prefix>rmvmoney <amount> <member> Parameter: amount : The amount of money you want to remove. If larger than the member's actual money, the money remain will be 0. member : The member you want to remove the money. Example: $rmvmoney 1000 MikeJollie You need: None, for now. The bot need: Send Messages .","title":"rmvmoney [DEVELOPING]"},{"location":"commands/currency/#balance-beta","text":"This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available. Display the amount of money you currently have. Usage: <prefix>balance Cooldown: 2 seconds per 1 use (user) Example: $balance You need: None. The bot need: Send Messages . This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"balance [BETA]"},{"location":"commands/dev/","text":"Dev commands These are the commands that are only for the bot developers to use ~~to abuse power~~. Table of Contents is_dev [INTERNAL] __init__ [INTERNAL] cog_check [INTERNAL] all_guild leave_guild reload reload_eh [INTERNAL] reload_all_extension report_response reset_all_cooldown is_dev [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a check to see if the invoker is a developer. __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category. cog_check [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if is_dev(ctx.author) and isDM(ctx.channel) , raise CheckFailure() and NoPrivateMessage() respectively. all_guild Display all guilds the bot is in. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def all_guild(self, ctx): Simplified Signature: all_guild Example: $all_guild Expected Output: an embed with information leave_guild Make the bot leave the current invoked guild (so you can save yourself from clicking the kick button). Full Signature: @commands.command() @commands.is_owner() async def leave_guild(self, ctx): Simplified Signature: leave_guild Example: $leave_guild Expected Output: verification steps reload Reload a module. This is extremely useful when you don't want to shut down the bot, but still want the update to arrive Note that by reloading the module, the categories order in help will be changed. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload(self, ctx, name): Simplified Signature: reload <module name> Example: $reload categories.dev Expected Output: Reloaded extension categories.dev reload_eh [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the reload command. It is currently only response to the ModuleNotFound exception. reload_all_extension Reload all modules. Useful for OCD people (like MikeJollie) because reload will mess up the order in help and help-all . Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload_all_extension(self, ctx): Simplified Signature: reload_all_extension Example: $reload_all_extension Expected Output: Reloaded all extensions. report_response Response to a report/suggestion. Note that the command will look through the last 100 messages in the report channel in the support server. It is recommended not to use this more than once on the same report/suggestion. Full Signature: @commands.command(aliases = [\"suggest_response\"]) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 60.0, type = commands.BucketType.default) async def report_response(self, ctx, message_ID : int, *, response : str): Simplified Signature: report_response <messageID> <response> suggest_response <messageID> <response> Parameters: messageID : The message ID of the report. response : The response itself. Example: $report_response 649139994270892033 Nah Expected Output: embed edited reset_all_cooldown Reset all cooldowns on every commands. Full Signature: @commands.command() async def reset_all_cooldown(self, ctx): Simplified Signature: reset_all_cooldown Example: $reset_all_cooldown Expected Output: All cooldown reseted. shutdown Disconnect the bot from Discord. Usage: <prefix>shutdown Example: $cooldown You need: opted-in dev. The bot need: Send Messages . This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"Dev"},{"location":"commands/dev/#dev-commands","text":"These are the commands that are only for the bot developers to use ~~to abuse power~~.","title":"Dev commands"},{"location":"commands/dev/#table-of-contents","text":"is_dev [INTERNAL] __init__ [INTERNAL] cog_check [INTERNAL] all_guild leave_guild reload reload_eh [INTERNAL] reload_all_extension report_response reset_all_cooldown","title":"Table of Contents"},{"location":"commands/dev/#is_dev-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a check to see if the invoker is a developer.","title":"is_dev [INTERNAL]"},{"location":"commands/dev/#__init__-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category.","title":"__init__ [INTERNAL]"},{"location":"commands/dev/#cog_check-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if is_dev(ctx.author) and isDM(ctx.channel) , raise CheckFailure() and NoPrivateMessage() respectively.","title":"cog_check [INTERNAL]"},{"location":"commands/dev/#all_guild","text":"Display all guilds the bot is in. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def all_guild(self, ctx): Simplified Signature: all_guild Example: $all_guild Expected Output: an embed with information","title":"all_guild"},{"location":"commands/dev/#leave_guild","text":"Make the bot leave the current invoked guild (so you can save yourself from clicking the kick button). Full Signature: @commands.command() @commands.is_owner() async def leave_guild(self, ctx): Simplified Signature: leave_guild Example: $leave_guild Expected Output: verification steps","title":"leave_guild"},{"location":"commands/dev/#reload","text":"Reload a module. This is extremely useful when you don't want to shut down the bot, but still want the update to arrive Note that by reloading the module, the categories order in help will be changed. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload(self, ctx, name): Simplified Signature: reload <module name> Example: $reload categories.dev Expected Output: Reloaded extension categories.dev","title":"reload"},{"location":"commands/dev/#reload_eh-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the reload command. It is currently only response to the ModuleNotFound exception.","title":"reload_eh [INTERNAL]"},{"location":"commands/dev/#reload_all_extension","text":"Reload all modules. Useful for OCD people (like MikeJollie) because reload will mess up the order in help and help-all . Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload_all_extension(self, ctx): Simplified Signature: reload_all_extension Example: $reload_all_extension Expected Output: Reloaded all extensions.","title":"reload_all_extension"},{"location":"commands/dev/#report_response","text":"Response to a report/suggestion. Note that the command will look through the last 100 messages in the report channel in the support server. It is recommended not to use this more than once on the same report/suggestion. Full Signature: @commands.command(aliases = [\"suggest_response\"]) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 60.0, type = commands.BucketType.default) async def report_response(self, ctx, message_ID : int, *, response : str): Simplified Signature: report_response <messageID> <response> suggest_response <messageID> <response> Parameters: messageID : The message ID of the report. response : The response itself. Example: $report_response 649139994270892033 Nah Expected Output: embed edited","title":"report_response"},{"location":"commands/dev/#reset_all_cooldown","text":"Reset all cooldowns on every commands. Full Signature: @commands.command() async def reset_all_cooldown(self, ctx): Simplified Signature: reset_all_cooldown Example: $reset_all_cooldown Expected Output: All cooldown reseted.","title":"reset_all_cooldown"},{"location":"commands/dev/#shutdown","text":"Disconnect the bot from Discord. Usage: <prefix>shutdown Example: $cooldown You need: opted-in dev. The bot need: Send Messages . This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"shutdown"},{"location":"commands/events/","text":"Bot events This section is intentionally left empty due to a full rewrite in near future. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"Bot events"},{"location":"commands/events/#bot-events","text":"This section is intentionally left empty due to a full rewrite in near future. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"Bot events"},{"location":"commands/experiment/","text":"Experiment commands [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. This document is lasted reviewed on April 23rd (PT) by MikeJollie#1067","title":"Experiment"},{"location":"commands/experiment/#experiment-commands-deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. This document is lasted reviewed on April 23rd (PT) by MikeJollie#1067","title":"Experiment commands [DEPRECATED]"},{"location":"commands/logger/","text":"Logging events Unlike other categories, this categories only contains logging events for the logging feature of a Discord Bot. This category has no commands. If you're looking for setting up a logging channel/welcome channel/..., refers to page Settings . This section will be reformatted in near future. Table of Contents Specification [INTERNAL] __init__ [INTERNAL] log_check [INTERNAL] role_dpyperms_to_dperms [INTERNAL] channel_dpyperms_to_dperms [INTERNAL] on_message_delete on_bulk_message_delete [DEVELOPING] on_raw_message_edit on_message_edit on_member_ban on_member_unban on_member_join on_member_leave on_member_update on_guild_channel_create on_guild_channel_delete on_guild_channel_update on_guild_update on_guild_role_create on_guild_role_delete on_guild_role_update command_error Specification [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a set of format that the developers must follow while writing events for consistency. Any changes that does not follow this specification will be denied. Full Specification: # Specification: # Every single events here (except raw events) must have the following variables declared at the very first line after checking log: # - log_channel: the channel that's gonna send the embed. Retrieve using gconfig.get_config and config[\"LOG_CHANNEL\"] # - log_title: the log title that's gonna pass in title in discord.Embed # - log_content: the log content that's gonna pass in description in discord.Embed # - log_color: the color of the embed. It must be self.color_... depend on the current event. # - log_time: the timestamp of the embed. Typically get from entry.created_at. # - Optional(executor): the Member that triggered the event. # Log embed specification: # Every single embed send here (except raw events) must have the following format: # Embed.author as the executor. # Embed.title as log_title. # Embed.description as log_content. # Embed.color as log_color. # Embed.timestamp as log_time. # Embed.footer as the executor. # Optional (Embed.thumbnail) as the target. # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the emoji for the category as \ud83d\udcdd . This also defines the fixed colors for each audit log action. Any changes that does not follow this specification will be denied. Color Specification: # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal self.color_moderation = 0x000000 self.color_warn_mute = discord.Color.red() self.color_change = discord.Color.gold() self.color_delete = discord.Color.orange() self.color_create = discord.Color.green() self.color_guild_join_leave = discord.Color.blue() self.color_other = discord.Color.teal() log_check [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. An internal check if a guild enabled logging feature. It MUST be the first thing to check when writing any events. Full Signature: def log_check(self, guild): Return: True if config[\"ERROR\"] == 0 and config[\"STATUS_LOG\"] == 1 and config[\"LOG_CHANNEL\"] != 0 False otherwise. role_dpyperms_to_dperms [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a role permission to the text. Full Signature: def role_dpyperms_to_dperms(self, role_permissions : str): Return type: str Example: role_dpyperms_to_dperms(\"manage_guild\") -> \"Manage Server\" channel_dpyperms_to_dperms [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a channel permission to the text. Full Signature: def channel_dpyperms_to_dperms(self, channel_permissions : str): Return type: str Example: channel_dpyperms_to_dperms(\"manage_channels\") -> \"Manage Channels\" on_message_delete An event that is invoked when a message is deleted if the message is in cache . If the message isn't in cache, on_raw_message_delete is invoked instead. If it is a purge, then on_bulk_message_delete is invoked instead. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_message_delete(self, message): Limitation: The deletor does not always display correctly (due to Discord limitation). on_bulk_message_delete [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. on_raw_message_edit An event that is invoked when a message is edited even if the message isn't in cache . If the message is in cache, the event will do nothing and leave the task to on_message_edit . This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_raw_message_edit(self, payload): Limitation: The old content of the message cannot be found. There is a rare chance that the new content of the message cannot be found. on_message_edit An event that is invoked when a message is edited if the message is in cache . If the message isn't in cache, on_raw_message_edit is invoked instead. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_message_edit(self, before, after): Limitation: Does not log embed editing. on_member_ban An event that is invoked when a user/member is banned. The ban action will also invoke on_member_leave if the member is in the guild. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_ban(self, guild, user): Limitation: None on_member_unban An event that is invoked when a user is unbanned. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_unban(self, guild, user): Limitation: None on_member_join An event that is invoked when a user join the guild. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_join(self, member): Limitation: None on_member_leave An event that is invoked when a member leave the guild. This event is also invoked when a member is banned/kicked. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_remove(self, member): Limitation: When a kicked member rejoin and leave, the member will be logged that the member is kicked twice. (unsure) on_member_update An event that is invoked when a member's role changes, a member's status/activity changes, a member's nickname changes or a member is muted/deafened. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_member_update(self, before, after): Limitation: Changes in member's status/activity will not be logged by MichaelBot due to unnecessary spamming. Changes in member is muted/deafened is currently not be logged by MichaelBot due to the unnecessary logging. on_guild_channel_create An event that is invoked when a channel in a guild is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_channel_create(self, channel): Limitation: Does not display bitrate information in VoiceChannel . on_guild_channel_delete An event that is invoked when a channel in a guild is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_channel_delete(self, channel): Limitation: Does not display bitrate information in VoiceChannel . on_guild_channel_update An event that is invoked when a channel in a guild is edited. The edit can be either channel's name, channel's topic, channel's position or channel's permission. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_channel_update(self, before, after): Limitation: Changes in channel's position will not be logged by MichaelBot due to both spamming potential and messy Discord internal channel's position definition. on_guild_update An event that is invoked when the guild itself is edited. The edit can be either guild's name, guild's avatar or guild's owner. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_update(self, before, after): Limitation: Does not log changes in guild's avatar yet. on_guild_role_create An event that is invoked when a role is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_role_create(self, role): Limitation: Information may be logged incorrectly if the role is created by a bot. on_guild_role_delete An event that is invoked when a role is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_role_delete(self, role): Limitation: Requires View Audit Log permission. on_guild_role_update An event that is invoked when a role is edited. The edit can be either role's name changes, role's color changes, role is mentionable changes, role display separately changes or role's permission changes. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_role_update(self, before, after): Limitation: Changes in mentionable and displaying separately for role will not be logged by MichaelBot due to unnecessary logging. command_error A listener that listen to on_command_error and display the error to the logging channel. Full Signature: @commands.Cog.listener(\"on_command_error\") async def command_error(self, ctx, error): Limitation: Not user-friendly error message (can't change). If the original message has codeblock, the embed will display ugly. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"Logging events"},{"location":"commands/logger/#logging-events","text":"Unlike other categories, this categories only contains logging events for the logging feature of a Discord Bot. This category has no commands. If you're looking for setting up a logging channel/welcome channel/..., refers to page Settings . This section will be reformatted in near future.","title":"Logging events"},{"location":"commands/logger/#table-of-contents","text":"Specification [INTERNAL] __init__ [INTERNAL] log_check [INTERNAL] role_dpyperms_to_dperms [INTERNAL] channel_dpyperms_to_dperms [INTERNAL] on_message_delete on_bulk_message_delete [DEVELOPING] on_raw_message_edit on_message_edit on_member_ban on_member_unban on_member_join on_member_leave on_member_update on_guild_channel_create on_guild_channel_delete on_guild_channel_update on_guild_update on_guild_role_create on_guild_role_delete on_guild_role_update command_error","title":"Table of Contents"},{"location":"commands/logger/#specification-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a set of format that the developers must follow while writing events for consistency. Any changes that does not follow this specification will be denied. Full Specification: # Specification: # Every single events here (except raw events) must have the following variables declared at the very first line after checking log: # - log_channel: the channel that's gonna send the embed. Retrieve using gconfig.get_config and config[\"LOG_CHANNEL\"] # - log_title: the log title that's gonna pass in title in discord.Embed # - log_content: the log content that's gonna pass in description in discord.Embed # - log_color: the color of the embed. It must be self.color_... depend on the current event. # - log_time: the timestamp of the embed. Typically get from entry.created_at. # - Optional(executor): the Member that triggered the event. # Log embed specification: # Every single embed send here (except raw events) must have the following format: # Embed.author as the executor. # Embed.title as log_title. # Embed.description as log_content. # Embed.color as log_color. # Embed.timestamp as log_time. # Embed.footer as the executor. # Optional (Embed.thumbnail) as the target. # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal","title":"Specification [INTERNAL]"},{"location":"commands/logger/#__init__-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the emoji for the category as \ud83d\udcdd . This also defines the fixed colors for each audit log action. Any changes that does not follow this specification will be denied. Color Specification: # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal self.color_moderation = 0x000000 self.color_warn_mute = discord.Color.red() self.color_change = discord.Color.gold() self.color_delete = discord.Color.orange() self.color_create = discord.Color.green() self.color_guild_join_leave = discord.Color.blue() self.color_other = discord.Color.teal()","title":"__init__ [INTERNAL]"},{"location":"commands/logger/#log_check-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. An internal check if a guild enabled logging feature. It MUST be the first thing to check when writing any events. Full Signature: def log_check(self, guild): Return: True if config[\"ERROR\"] == 0 and config[\"STATUS_LOG\"] == 1 and config[\"LOG_CHANNEL\"] != 0 False otherwise.","title":"log_check [INTERNAL]"},{"location":"commands/logger/#role_dpyperms_to_dperms-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a role permission to the text. Full Signature: def role_dpyperms_to_dperms(self, role_permissions : str): Return type: str Example: role_dpyperms_to_dperms(\"manage_guild\") -> \"Manage Server\"","title":"role_dpyperms_to_dperms [INTERNAL]"},{"location":"commands/logger/#channel_dpyperms_to_dperms-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a channel permission to the text. Full Signature: def channel_dpyperms_to_dperms(self, channel_permissions : str): Return type: str Example: channel_dpyperms_to_dperms(\"manage_channels\") -> \"Manage Channels\"","title":"channel_dpyperms_to_dperms [INTERNAL]"},{"location":"commands/logger/#on_message_delete","text":"An event that is invoked when a message is deleted if the message is in cache . If the message isn't in cache, on_raw_message_delete is invoked instead. If it is a purge, then on_bulk_message_delete is invoked instead. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_message_delete(self, message): Limitation: The deletor does not always display correctly (due to Discord limitation).","title":"on_message_delete"},{"location":"commands/logger/#on_bulk_message_delete-developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing.","title":"on_bulk_message_delete [DEVELOPING]"},{"location":"commands/logger/#on_raw_message_edit","text":"An event that is invoked when a message is edited even if the message isn't in cache . If the message is in cache, the event will do nothing and leave the task to on_message_edit . This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_raw_message_edit(self, payload): Limitation: The old content of the message cannot be found. There is a rare chance that the new content of the message cannot be found.","title":"on_raw_message_edit"},{"location":"commands/logger/#on_message_edit","text":"An event that is invoked when a message is edited if the message is in cache . If the message isn't in cache, on_raw_message_edit is invoked instead. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_message_edit(self, before, after): Limitation: Does not log embed editing.","title":"on_message_edit"},{"location":"commands/logger/#on_member_ban","text":"An event that is invoked when a user/member is banned. The ban action will also invoke on_member_leave if the member is in the guild. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_ban(self, guild, user): Limitation: None","title":"on_member_ban"},{"location":"commands/logger/#on_member_unban","text":"An event that is invoked when a user is unbanned. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_unban(self, guild, user): Limitation: None","title":"on_member_unban"},{"location":"commands/logger/#on_member_join","text":"An event that is invoked when a user join the guild. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_join(self, member): Limitation: None","title":"on_member_join"},{"location":"commands/logger/#on_member_leave","text":"An event that is invoked when a member leave the guild. This event is also invoked when a member is banned/kicked. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_remove(self, member): Limitation: When a kicked member rejoin and leave, the member will be logged that the member is kicked twice. (unsure)","title":"on_member_leave"},{"location":"commands/logger/#on_member_update","text":"An event that is invoked when a member's role changes, a member's status/activity changes, a member's nickname changes or a member is muted/deafened. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_member_update(self, before, after): Limitation: Changes in member's status/activity will not be logged by MichaelBot due to unnecessary spamming. Changes in member is muted/deafened is currently not be logged by MichaelBot due to the unnecessary logging.","title":"on_member_update"},{"location":"commands/logger/#on_guild_channel_create","text":"An event that is invoked when a channel in a guild is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_channel_create(self, channel): Limitation: Does not display bitrate information in VoiceChannel .","title":"on_guild_channel_create"},{"location":"commands/logger/#on_guild_channel_delete","text":"An event that is invoked when a channel in a guild is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_channel_delete(self, channel): Limitation: Does not display bitrate information in VoiceChannel .","title":"on_guild_channel_delete"},{"location":"commands/logger/#on_guild_channel_update","text":"An event that is invoked when a channel in a guild is edited. The edit can be either channel's name, channel's topic, channel's position or channel's permission. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_channel_update(self, before, after): Limitation: Changes in channel's position will not be logged by MichaelBot due to both spamming potential and messy Discord internal channel's position definition.","title":"on_guild_channel_update"},{"location":"commands/logger/#on_guild_update","text":"An event that is invoked when the guild itself is edited. The edit can be either guild's name, guild's avatar or guild's owner. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_update(self, before, after): Limitation: Does not log changes in guild's avatar yet.","title":"on_guild_update"},{"location":"commands/logger/#on_guild_role_create","text":"An event that is invoked when a role is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_role_create(self, role): Limitation: Information may be logged incorrectly if the role is created by a bot.","title":"on_guild_role_create"},{"location":"commands/logger/#on_guild_role_delete","text":"An event that is invoked when a role is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_role_delete(self, role): Limitation: Requires View Audit Log permission.","title":"on_guild_role_delete"},{"location":"commands/logger/#on_guild_role_update","text":"An event that is invoked when a role is edited. The edit can be either role's name changes, role's color changes, role is mentionable changes, role display separately changes or role's permission changes. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_role_update(self, before, after): Limitation: Changes in mentionable and displaying separately for role will not be logged by MichaelBot due to unnecessary logging.","title":"on_guild_role_update"},{"location":"commands/logger/#command_error","text":"A listener that listen to on_command_error and display the error to the logging channel. Full Signature: @commands.Cog.listener(\"on_command_error\") async def command_error(self, ctx, error): Limitation: Not user-friendly error message (can't change). If the original message has codeblock, the embed will display ugly. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"command_error"},{"location":"commands/moderation/","text":"Moderation commands Table of Contents __init__ [INTERNAL] ban ban_eh [INTERNAL] hackban kick kick_eh [INTERNAL] mute [INCOMPLETE] [DEVELOPING] unban These are commands that performs moderating action. __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of this category. This set the Moderation category's emoji as \ud83d\udd28 . ban Ban a member out of the server. Note that the bot's role needs to be higher than the member to ban. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def ban(self, ctx, user : discord.Member, *, reason = None): Simplified Signature: ban <member> [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for banning. Example: $ban MikeJollie Look at too many lolis Expected Output: an embed with verification ban_eh [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the ban command. It is currently only response to the BadArgument exception, which signify the user is not in the guild cache. hackban Ban a user out of the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def hackban(self, ctx, id : int, *, reason = None): Simplified Signature: hackban <ID> [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $hackban 472832990012243969 Befriend with too many lolis Expected Output: an embed with verification kick Kick a member out of the server. Note that the bot's role needs to be higher than the member to kick. Full Signature: @commands.command() @commands.has_guild_permissions(kick_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def kick(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: kick <member> [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for kicking. Example: $kick MikeJollie Being dumb Expected Output: an embed with verification kick_eh [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the kick command. It is currently only response to the BadArgument exception, which signify that the member is not in the guild. mute [INCOMPLETE] [DEVELOPING] This section is labeled as [INCOMPLETE], will be updated in the future. This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. Mute a member from chatting. Full Signature: @commands.command(hidden = True, enabled = True) @commands.has_permissions(kick_members = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(1, 5.0, commands.BucketType.guild) async def mute(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: mute <member> [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for muting. Example: $mute MikeJollie Stop saying \"Loli is justice\" Expected Output: an embed with verification unban Unban a user from the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def unban(self, ctx, id : int, *, reason = None): Simplified Signature: unban <ID> [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $unban 472832990012243969 You've been trained by the FBI now Expected Output: an embed with verification This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Moderation"},{"location":"commands/moderation/#moderation-commands","text":"","title":"Moderation commands"},{"location":"commands/moderation/#table-of-contents","text":"__init__ [INTERNAL] ban ban_eh [INTERNAL] hackban kick kick_eh [INTERNAL] mute [INCOMPLETE] [DEVELOPING] unban These are commands that performs moderating action.","title":"Table of Contents"},{"location":"commands/moderation/#__init__-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of this category. This set the Moderation category's emoji as \ud83d\udd28 .","title":"__init__ [INTERNAL]"},{"location":"commands/moderation/#ban","text":"Ban a member out of the server. Note that the bot's role needs to be higher than the member to ban. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def ban(self, ctx, user : discord.Member, *, reason = None): Simplified Signature: ban <member> [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for banning. Example: $ban MikeJollie Look at too many lolis Expected Output: an embed with verification","title":"ban"},{"location":"commands/moderation/#ban_eh-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the ban command. It is currently only response to the BadArgument exception, which signify the user is not in the guild cache.","title":"ban_eh [INTERNAL]"},{"location":"commands/moderation/#hackban","text":"Ban a user out of the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def hackban(self, ctx, id : int, *, reason = None): Simplified Signature: hackban <ID> [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $hackban 472832990012243969 Befriend with too many lolis Expected Output: an embed with verification","title":"hackban"},{"location":"commands/moderation/#kick","text":"Kick a member out of the server. Note that the bot's role needs to be higher than the member to kick. Full Signature: @commands.command() @commands.has_guild_permissions(kick_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def kick(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: kick <member> [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for kicking. Example: $kick MikeJollie Being dumb Expected Output: an embed with verification","title":"kick"},{"location":"commands/moderation/#kick_eh-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the kick command. It is currently only response to the BadArgument exception, which signify that the member is not in the guild.","title":"kick_eh [INTERNAL]"},{"location":"commands/moderation/#mute-incomplete-developing","text":"This section is labeled as [INCOMPLETE], will be updated in the future. This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. Mute a member from chatting. Full Signature: @commands.command(hidden = True, enabled = True) @commands.has_permissions(kick_members = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(1, 5.0, commands.BucketType.guild) async def mute(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: mute <member> [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for muting. Example: $mute MikeJollie Stop saying \"Loli is justice\" Expected Output: an embed with verification","title":"mute [INCOMPLETE] [DEVELOPING]"},{"location":"commands/moderation/#unban","text":"Unban a user from the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def unban(self, ctx, id : int, *, reason = None): Simplified Signature: unban <ID> [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $unban 472832990012243969 You've been trained by the FBI now Expected Output: an embed with verification This document is last updated on May 26th (PT) by MikeJollie#1067","title":"unban"},{"location":"commands/music/","text":"Music [OUTDATED] [DEPRECATED] This section is labeled as [OUTDATED], will be updated in the future. This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. This document is missing many functions/methods due to the complexity. It is currently only shows the commands. These are commands that play music in voice channel. It is currently support YouTube, SoundCloud, Twitch, Vimeo and Mixer. Note: This section might be removed in the future. In the mean time, every information below is not correct. connect Connect to a voice channel. If the channel is not specified, it'll attempt to join the current voice channel you're in. This command is implicitly called if the user invoke play without the bot inside a voice channel. Full Signature: @commands.command(aliases = [\"join\"]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def connect(self, ctx, *, channel : discord.VoiceChannel = None): Simplified Signature: connect [voicechannel] join [voicechannel] Parameters: channel : A Discord voice channel. This can be any of the following form: <ID/name> Example: $connect discord-got-talents Expected Output: No output . play Play the audio provided by the query. More precisely, it streams the audio, because the bot does not download the video. This command implicitly call connect if the user invoke without the bot insdie a voice channel. Full Signature: @commands.command(aliases = ['p']) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.user) async def play(self, ctx, *, query : str): Simplified Signature: play <query> p <query> Parameters: query : The resource to play. This can be any of the following form: <link/name> Example: $play You've been gnomed Expected Output: an embed with information or reactions now_playing Indicate what song is playing. Full Signature: @commands.command(aliases = [\"np\"]) @commands.bot_has__guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 2, per = 15.0, type = commands.BucketType.user) async def now_playing(self, ctx): Simplified Signature: now_playing np Example: $np Expected Output: an embed with information or reactions pause Pause the currently playing song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def pause(self, ctx): Simplified Signature: pause Example: $pause Expected Output: a vote resume Resume the currently paused song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def resume(self, ctx): Simplified Signature: resume Example: $resume Expected Output: a vote skip Skip the current song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def skip(self, ctx): Simplified Signature: skip Example: $skip Expected Output: a vote stop Stop the player, disconnect and clear the queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [\"dc\", \"disconnect\"]) @commands.cooldown(rate = 1, per = 15.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def stop(self, ctx): Simplified Signature: stop Example: $stop Expected Output: ` a vote, then the bot disconnects volume Adjust the player's volume. Full Signature: @commands.command(aliases = [\"vol\"]) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def volume(self, ctx, *, value: int): Simplified Signature: volume <value> Parameter: value : The value you want the volume to be at. It is in the range 0 to 1000. Example: $vol 100 Expected Output: an embed with verification queue Retrieve a list of current queued songs. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def queue(self, ctx): Simplified Signature: queue Example: $queue Expected Output: an embed with songs shuffle Shuffle the current queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [\"mix\"]) @commands.cooldown(rate = 2, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def shuffle(self, ctx): Simplified Signature: shuffle Example: $shuffle Expected Output: a vote repeat Repeat the currently played song one more time. Full Signature: @commands.command(aliases = [\"loop\"]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def repeat(self, ctx): Simplified Signature: repeat Example: $repeat Expected Output: nothing This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"Music"},{"location":"commands/music/#music-outdated-deprecated","text":"This section is labeled as [OUTDATED], will be updated in the future. This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. This document is missing many functions/methods due to the complexity. It is currently only shows the commands. These are commands that play music in voice channel. It is currently support YouTube, SoundCloud, Twitch, Vimeo and Mixer. Note: This section might be removed in the future. In the mean time, every information below is not correct.","title":"Music [OUTDATED] [DEPRECATED]"},{"location":"commands/music/#connect","text":"Connect to a voice channel. If the channel is not specified, it'll attempt to join the current voice channel you're in. This command is implicitly called if the user invoke play without the bot inside a voice channel. Full Signature: @commands.command(aliases = [\"join\"]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def connect(self, ctx, *, channel : discord.VoiceChannel = None): Simplified Signature: connect [voicechannel] join [voicechannel] Parameters: channel : A Discord voice channel. This can be any of the following form: <ID/name> Example: $connect discord-got-talents Expected Output: No output .","title":"connect"},{"location":"commands/music/#play","text":"Play the audio provided by the query. More precisely, it streams the audio, because the bot does not download the video. This command implicitly call connect if the user invoke without the bot insdie a voice channel. Full Signature: @commands.command(aliases = ['p']) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.user) async def play(self, ctx, *, query : str): Simplified Signature: play <query> p <query> Parameters: query : The resource to play. This can be any of the following form: <link/name> Example: $play You've been gnomed Expected Output: an embed with information or reactions","title":"play"},{"location":"commands/music/#now_playing","text":"Indicate what song is playing. Full Signature: @commands.command(aliases = [\"np\"]) @commands.bot_has__guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 2, per = 15.0, type = commands.BucketType.user) async def now_playing(self, ctx): Simplified Signature: now_playing np Example: $np Expected Output: an embed with information or reactions","title":"now_playing"},{"location":"commands/music/#pause","text":"Pause the currently playing song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def pause(self, ctx): Simplified Signature: pause Example: $pause Expected Output: a vote","title":"pause"},{"location":"commands/music/#resume","text":"Resume the currently paused song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def resume(self, ctx): Simplified Signature: resume Example: $resume Expected Output: a vote","title":"resume"},{"location":"commands/music/#skip","text":"Skip the current song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def skip(self, ctx): Simplified Signature: skip Example: $skip Expected Output: a vote","title":"skip"},{"location":"commands/music/#stop","text":"Stop the player, disconnect and clear the queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [\"dc\", \"disconnect\"]) @commands.cooldown(rate = 1, per = 15.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def stop(self, ctx): Simplified Signature: stop Example: $stop Expected Output: ` a vote, then the bot disconnects","title":"stop"},{"location":"commands/music/#volume","text":"Adjust the player's volume. Full Signature: @commands.command(aliases = [\"vol\"]) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def volume(self, ctx, *, value: int): Simplified Signature: volume <value> Parameter: value : The value you want the volume to be at. It is in the range 0 to 1000. Example: $vol 100 Expected Output: an embed with verification","title":"volume"},{"location":"commands/music/#queue","text":"Retrieve a list of current queued songs. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def queue(self, ctx): Simplified Signature: queue Example: $queue Expected Output: an embed with songs","title":"queue"},{"location":"commands/music/#shuffle","text":"Shuffle the current queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [\"mix\"]) @commands.cooldown(rate = 2, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def shuffle(self, ctx): Simplified Signature: shuffle Example: $shuffle Expected Output: a vote","title":"shuffle"},{"location":"commands/music/#repeat","text":"Repeat the currently played song one more time. Full Signature: @commands.command(aliases = [\"loop\"]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def repeat(self, ctx): Simplified Signature: repeat Example: $repeat Expected Output: nothing This document is last updated on Oct 31st (PT) by MikeJollie#1067","title":"repeat"},{"location":"commands/server/","text":"Settings commands [EXPERIMENT] This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. These are commands that focus in providing Quality of Life for the guild. It comes with logging, welcoming, bad words filtering (new), goodbye (new), reaction roles (new), enabling/disabling a command (new). __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \ud83d\udee0 . log_enable Enable logging in your server. Full Signature: @commands.command(aliases = [\"log-enable\"]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_enable(self, ctx): Simplified Signature: log_enable log-enable Example: $log_enable Expected Output: a confirm message log_setup Set the logging channel or view which channel is one. This implicitly call log_enable() if you haven't. Full Signature: @commands.command(aliases = [\"log-setup\"]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_setup(self, ctx, log : discord.TextChannel = None): Simplified Signature: log_setup [channel] log-setup [channel] Parameters: channel : The text channel you want the bot to send logs. By default, it's the current channel the command is invoked in. Examples: Example 1: $log_setup Example 2: $log_setup #mikejollie-is-gay-change-my-mind Expected Output: a verification embed at [channel] log_disable Disable logging in your server. Full Signature: @commands.command(aliases = [\"log-disable\"]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_disable(self, ctx): Simplified Signature: log_disable log-disable Example: $log_disable Expected Output: a confirm message This document is last updated on Aug 8th 2020 by MikeJollie#1067","title":"Settings"},{"location":"commands/server/#settings-commands-experiment","text":"This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. These are commands that focus in providing Quality of Life for the guild. It comes with logging, welcoming, bad words filtering (new), goodbye (new), reaction roles (new), enabling/disabling a command (new).","title":"Settings commands [EXPERIMENT]"},{"location":"commands/server/#__init__-internal","text":"This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \ud83d\udee0 .","title":"__init__ [INTERNAL]"},{"location":"commands/server/#log_enable","text":"Enable logging in your server. Full Signature: @commands.command(aliases = [\"log-enable\"]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_enable(self, ctx): Simplified Signature: log_enable log-enable Example: $log_enable Expected Output: a confirm message","title":"log_enable"},{"location":"commands/server/#log_setup","text":"Set the logging channel or view which channel is one. This implicitly call log_enable() if you haven't. Full Signature: @commands.command(aliases = [\"log-setup\"]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_setup(self, ctx, log : discord.TextChannel = None): Simplified Signature: log_setup [channel] log-setup [channel] Parameters: channel : The text channel you want the bot to send logs. By default, it's the current channel the command is invoked in. Examples: Example 1: $log_setup Example 2: $log_setup #mikejollie-is-gay-change-my-mind Expected Output: a verification embed at [channel]","title":"log_setup"},{"location":"commands/server/#log_disable","text":"Disable logging in your server. Full Signature: @commands.command(aliases = [\"log-disable\"]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_disable(self, ctx): Simplified Signature: log_disable log-disable Example: $log_disable Expected Output: a confirm message This document is last updated on Aug 8th 2020 by MikeJollie#1067","title":"log_disable"},{"location":"commands/utility/","text":"","title":"Utility"},{"location":"template/help/","text":"","title":"Help"},{"location":"template/menu/","text":"","title":"Menu"},{"location":"template/paginator/","text":"","title":"Paginator"},{"location":"utilities/db/","text":"","title":"Database methods"},{"location":"utilities/methods/","text":"","title":"Utility methods"}]}