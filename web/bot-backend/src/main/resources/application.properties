#JDBC properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/bot?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&jdbcCompliantTruncation=false
spring.datasource.username=bot
spring.datasource.password=bot

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=create-drop

# Upload file size
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB

# OAuth providers
#spring.security.oauth2.client.registration.github.clientId=75eb2f23a48ab978225d
#spring.security.oauth2.client.registration.github.clientSecret=761be3045bed0d601758c7bd267ae68dfb2c5a2a

spring.security.oauth2.client.registration.discord.clientId=649822097492803584
spring.security.oauth2.client.registration.discord.clientSecret=PlR87dkPyaz9GBy_j8NVUCKLn1XnNZH0
spring.security.oauth2.client.registration.discord.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.discord.scope=identify+email
spring.security.oauth2.client.registration.discord.redirect-uri=http://localhost:8080/login/oauth2/code/discord
spring.security.oauth2.client.registration.discord.client-name=Discord
spring.security.oauth2.client.registration.discord.provider=discord
spring.security.oauth2.client.provider.discord.authorization-uri=https://discord.com/api/oauth2/authorize
spring.security.oauth2.client.provider.discord.token-uri=https://discord.com/api/oauth2/token
spring.security.oauth2.client.provider.discord.user-info-uri=https://discord.com/api/users/@me
spring.security.oauth2.client.provider.discord.user-name-attribute=username

discord.guildsUrl=https://discord.com/api/users/@me/guilds

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:4200/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect

