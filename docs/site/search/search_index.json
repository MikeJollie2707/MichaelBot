{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MichaelBot's documentation Table of Contents Introduction Convention Parameters Prefix User/Member Concept Permissions Cooldown Understanding command's signature Introduction This is the official documentation for MichaelBot. This can be used as a developer documentation or user documentation. If you want to invite the bot, you won't be able to, yet. You can however, ask MikeJollie#1067 to invite the bot via MichaelBot support server . The source of the bot is available publicly on GitHub . Convention These are the conventions I use throughout this document: Parameters These are the parameter types you will find in help and in Simplified Signature section later. parameter : Required parameter. The bot will raise error without this parameter . [parameter] : Optional parameter. The bot can still works without this parameter . param1/param2/... or [param1/param2/...] : You can provide either param style. The accuracy is in descending order . Example: if it's profile [mention/ID/name/nickname] , means you can, optionally, provide either the mention, the id or the name/nickname of the user. Using mention or id will provide more accuracy than name/nickname . If the parameter has space, use \"double quotes\" to make it a param. Example: if it's profile [mention/ID/name/nickname] and the name is Hello World then you will use profile \"Hello World\" . Using profile Hello World will most likely raise error . Prefix This document will assume you know how to provoke a command using prefix command_name . If you don't know the prefix of the bot, use the bot's mention as the prefix (not recommended). The default prefix is $ but no it doesn't have $sudo. User/Member Concept User/Member are usually confused terms for a Discord user, but here are the difference. When this document refers to \"user\" , it refers to a Discord user regardless of the server . When this document refers to \"member\" , it refers to a Discord user in a certain server(s) . Note that Discord API doesn't allow bot to get information about a user/member if the bot does not see the user/member , which means the bot needs to share at least 1 server with the user/member to actually work. Permissions The convention for permissions in help is as follow: You need : The required permission you need to have to execute the command. I need : The required permission the bot need to have to execute the command. This document will asssume the bot has Send Messages and Read Messages in the channel you provoke the command. Cooldown The convention for cooldown syntax in help is x seconds per n use(s) (cooldown type) . x : The cooldown duration before you can use the command. n : The number of times the command is used before invoking the cooldown. cooldown type : There are usually 4 types of cooldown in this bot: global : The cooldown applies to every servers the bot joins. Example: If a person invokes prefix n times, no one can invoke prefix again until x seconds are passed. guild : The cooldown applies to everyone in a certain server . Example: If a person invokes kick n times, no one in that person's server can invoke kick again until x seconds are passed. user : The cooldown applies to that certain user . Example: If the user MikeJollie invoke embed_simple n times, that certain user can not invoke embed_simple again until x seconds are passed. member : The cooldown applies to that certain member . Example: If the member MikeJollie invoke test n times, that certain member can not invoke MikeJollie in the same server he invoked again until x seconds are passed. He can invoke the command in a different server in that duration however . Understanding command's signature If you're not a geek, you can refer to help command and read the sections above. A typical command's signature is as follow: @commands.command(aliases = [ alias1 , alias2 ]) @commands.has_permissions(manage_messages = True) @commands.has_guild_permissions(...) @commands.bot_has_permissions(...) @commands.bot_has_guild_permissions(...) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.default) async def test(self, ctx, param1, param2 : discord.User, param3 : discord.User = None): The first line 's significance is the aliases = [] . It tells that the command has the following alias(es) , which can be used instead of using the command's name. The second line means the user who invoke the command must have a certain permission at the invoked channel to invoke the command . In this example, the user must have Manage Messages permission in the channel to use the command. The third line is similar to the second line, except it consider the guild's permission . For example, a member that is not allowed to add reactions to a certain channel can still invoke the command if the member's roles allowed. The fourth line is the same as the second line except it checks the bot's permission . The fifth line is the same as the third line except it checks the bot's guild permission . The sixth line defines the cooldown for the command . rate means x , per means n and type means cooldown type in cooldown . default is global . The last line defines the command with the name test , that accept at max 3 parameters (ignore self and ctx ). The first argument is param1 , and it is required. The second argument is param2 , and it is required. However, the bot will intepret param2 as if it is a User , and so the parameter will accept ID/discriminator/mention/name/nickname . If the bot fails to convert to a User, it'll raise error. The third argument is param3 , and it is optional. It'll do the same thing as param2 , but if it doesn't presence, the bot will ignore it. test hey MikeJollie is valid, test is invalid, test hey MikeJollie Stranger.com is valid, test hey is invalid. This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Home"},{"location":"#welcome-to-michaelbots-documentation","text":"","title":"Welcome to MichaelBot's documentation"},{"location":"#table-of-contents","text":"Introduction Convention Parameters Prefix User/Member Concept Permissions Cooldown Understanding command's signature","title":"Table of Contents"},{"location":"#introduction","text":"This is the official documentation for MichaelBot. This can be used as a developer documentation or user documentation. If you want to invite the bot, you won't be able to, yet. You can however, ask MikeJollie#1067 to invite the bot via MichaelBot support server . The source of the bot is available publicly on GitHub .","title":"Introduction"},{"location":"#convention","text":"These are the conventions I use throughout this document:","title":"Convention"},{"location":"#parameters","text":"These are the parameter types you will find in help and in Simplified Signature section later. parameter : Required parameter. The bot will raise error without this parameter . [parameter] : Optional parameter. The bot can still works without this parameter . param1/param2/... or [param1/param2/...] : You can provide either param style. The accuracy is in descending order . Example: if it's profile [mention/ID/name/nickname] , means you can, optionally, provide either the mention, the id or the name/nickname of the user. Using mention or id will provide more accuracy than name/nickname . If the parameter has space, use \"double quotes\" to make it a param. Example: if it's profile [mention/ID/name/nickname] and the name is Hello World then you will use profile \"Hello World\" . Using profile Hello World will most likely raise error .","title":"Parameters"},{"location":"#prefix","text":"This document will assume you know how to provoke a command using prefix command_name . If you don't know the prefix of the bot, use the bot's mention as the prefix (not recommended). The default prefix is $ but no it doesn't have $sudo.","title":"Prefix"},{"location":"#usermember-concept","text":"User/Member are usually confused terms for a Discord user, but here are the difference. When this document refers to \"user\" , it refers to a Discord user regardless of the server . When this document refers to \"member\" , it refers to a Discord user in a certain server(s) . Note that Discord API doesn't allow bot to get information about a user/member if the bot does not see the user/member , which means the bot needs to share at least 1 server with the user/member to actually work.","title":"User/Member Concept"},{"location":"#permissions","text":"The convention for permissions in help is as follow: You need : The required permission you need to have to execute the command. I need : The required permission the bot need to have to execute the command. This document will asssume the bot has Send Messages and Read Messages in the channel you provoke the command.","title":"Permissions"},{"location":"#cooldown","text":"The convention for cooldown syntax in help is x seconds per n use(s) (cooldown type) . x : The cooldown duration before you can use the command. n : The number of times the command is used before invoking the cooldown. cooldown type : There are usually 4 types of cooldown in this bot: global : The cooldown applies to every servers the bot joins. Example: If a person invokes prefix n times, no one can invoke prefix again until x seconds are passed. guild : The cooldown applies to everyone in a certain server . Example: If a person invokes kick n times, no one in that person's server can invoke kick again until x seconds are passed. user : The cooldown applies to that certain user . Example: If the user MikeJollie invoke embed_simple n times, that certain user can not invoke embed_simple again until x seconds are passed. member : The cooldown applies to that certain member . Example: If the member MikeJollie invoke test n times, that certain member can not invoke MikeJollie in the same server he invoked again until x seconds are passed. He can invoke the command in a different server in that duration however .","title":"Cooldown"},{"location":"#understanding-commands-signature","text":"If you're not a geek, you can refer to help command and read the sections above. A typical command's signature is as follow: @commands.command(aliases = [ alias1 , alias2 ]) @commands.has_permissions(manage_messages = True) @commands.has_guild_permissions(...) @commands.bot_has_permissions(...) @commands.bot_has_guild_permissions(...) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.default) async def test(self, ctx, param1, param2 : discord.User, param3 : discord.User = None): The first line 's significance is the aliases = [] . It tells that the command has the following alias(es) , which can be used instead of using the command's name. The second line means the user who invoke the command must have a certain permission at the invoked channel to invoke the command . In this example, the user must have Manage Messages permission in the channel to use the command. The third line is similar to the second line, except it consider the guild's permission . For example, a member that is not allowed to add reactions to a certain channel can still invoke the command if the member's roles allowed. The fourth line is the same as the second line except it checks the bot's permission . The fifth line is the same as the third line except it checks the bot's guild permission . The sixth line defines the cooldown for the command . rate means x , per means n and type means cooldown type in cooldown . default is global . The last line defines the command with the name test , that accept at max 3 parameters (ignore self and ctx ). The first argument is param1 , and it is required. The second argument is param2 , and it is required. However, the bot will intepret param2 as if it is a User , and so the parameter will accept ID/discriminator/mention/name/nickname . If the bot fails to convert to a User, it'll raise error. The third argument is param3 , and it is optional. It'll do the same thing as param2 , but if it doesn't presence, the bot will ignore it. test hey MikeJollie is valid, test is invalid, test hey MikeJollie Stranger.com is valid, test hey is invalid. This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Understanding command's signature"},{"location":"zutil/","text":"Label templates Copy the text according to the label. Table of Contents [DEPRECATED] [INTERNAL] [INCOMPLETE] [OUTDATED] [EXPERIMENT] [BETA] [DEVELOPING] [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. [INCOMPLETE] This section is labeled as [INCOMPLETE], will be updated in the future. [OUTDATED] This section is labeled as [OUTDATED], will be updated in the future. [EXPERIMENT] This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. [BETA] This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available. [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing.","title":"Zutil"},{"location":"zutil/#label-templates","text":"Copy the text according to the label.","title":"Label templates"},{"location":"zutil/#table-of-contents","text":"[DEPRECATED] [INTERNAL] [INCOMPLETE] [OUTDATED] [EXPERIMENT] [BETA] [DEVELOPING]","title":"Table of Contents"},{"location":"zutil/#deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future.","title":"[DEPRECATED]"},{"location":"zutil/#internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose.","title":"[INTERNAL]"},{"location":"zutil/#incomplete","text":"This section is labeled as [INCOMPLETE], will be updated in the future.","title":"[INCOMPLETE]"},{"location":"zutil/#outdated","text":"This section is labeled as [OUTDATED], will be updated in the future.","title":"[OUTDATED]"},{"location":"zutil/#experiment","text":"This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available.","title":"[EXPERIMENT]"},{"location":"zutil/#beta","text":"This section is labeled as [BETA], which means the function/command is currently in beta testing and possibly publicly available.","title":"[BETA]"},{"location":"zutil/#developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing.","title":"[DEVELOPING]"},{"location":"commands/core/","text":"Core commands These are commands that are mostly related to information. __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \u2699\ufe0f . cog_check [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if ctx is in private DM or not, and will raise NoPrivateMessage() exception if it is. changelog Show the latest 10 changes of the bot. Full Signature: @commands.command() @commands.bot_has_permissions(read_message_history = True, add_reactions = True, send_messages = True) async def changelog(self, ctx): Simplified Signature: changelog Example: $changelog Expected Output: an embed with reactions to navigate help Show compact help about a command or a category. Note that the command name and category name is case sensitive. Full Signature: @commands.command() @commands.bot_has_permissions(read_message_history = True, add_reactions = True, send_messages = True) async def help(self, ctx, categoryOrcommand = ): Simplified Signature: help [category/command] Parameters: category/command : The category's name or the command's name or the command's aliases. Examples: Example 1: $help Core Example 2: $help info Example 3: $help Expected Output: Example 1: an embed with reactions to navigate Example 2: an embed with information Example 3: an embed with reactions to select help-all Show help about the bot, a command, or a category. Note: command name and category name is case sensitive; Core is different from core. Full Signature: # Doesn't exist Simplified Signature: help-all [category/command] Parameters: category/command : The category's name or the command's name or the command's aliases. Examples: Example 1: $help-all Core Example 2: $help-all info Example 3: $help-all Expected Output: Example 1: an embed with information Example 2: an embed with information Example 3: an embed with information info Provide information about the bot. Full Signature: @commands.command(aliases = [ about ]) @commands.bot_has_permissions(send_messages = True) async def info(self, ctx): Simplified Signature: info Example: $info Expected Output: an embed with information note Provide syntax convention for help and help-all . All it does is putting a link to this documentation. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def note(self, ctx): Simplified Signature: note Example: note Expected Output: an embed with a link prefix [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. View and set the prefix for the bot. Full Signature: @commands.command() @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def prefix(self, ctx, new_prefix : str = None): Simplified Signature: prefix [new_prefix] Parameters: new_prefix : The new prefix for the bot. I recommend to set it 1-4 characters with no spaces. Example: $prefix ! Expected Output: New prefix: ! profile Provide information about you or another member. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def profile(self, ctx, member: discord.Member = None): Simplified Signature: profile [member] Parameter: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] Examples: Example 1: $profile 472832990012243969 (recommended if you turn Developer Mode) Example 2: $profile MikeJollie#1067 (recommended for normal uses) Example 3: $profile Expected Output: an embed with information report Report a bug or suggest new features for the bot. Full Signature: @commands.command() @commands.bot_has_permissions(manage_messages = True, send_messages = True) @commands.cooldown(rate = 1, per = 30.0, type = commands.BucketType.user) async def report(self, ctx, *, content : str): Simplified Signature: report type content Parameters: type : Either report or suggest , based on your need. It is recommended to use the correct label for the report/suggestion to be easily viewed. content : The report/suggestion. Examples: Example 1: $report report The command xyz raise error (full error here...) Example 2: $report suggest The command profile should have this feature (feature here...) Expected Output: Your opinion has been sent. serverinfo Provide information about the server that invoke the command. Full Signature: @commands.command(aliases = [ server-info ]) @commands.bot_has_permissions(send_messages = True) async def serverinfo(self, ctx): Simplified Signature: serverinfo server-info Example: $serverinfo Expected Output: an embed with information This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Core"},{"location":"commands/core/#core-commands","text":"These are commands that are mostly related to information.","title":"Core commands"},{"location":"commands/core/#9595init9595-internal","text":"This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \u2699\ufe0f .","title":"__init__ [INTERNAL]"},{"location":"commands/core/#cog_check-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if ctx is in private DM or not, and will raise NoPrivateMessage() exception if it is.","title":"cog_check [INTERNAL]"},{"location":"commands/core/#changelog","text":"Show the latest 10 changes of the bot. Full Signature: @commands.command() @commands.bot_has_permissions(read_message_history = True, add_reactions = True, send_messages = True) async def changelog(self, ctx): Simplified Signature: changelog Example: $changelog Expected Output: an embed with reactions to navigate","title":"changelog"},{"location":"commands/core/#help","text":"Show compact help about a command or a category. Note that the command name and category name is case sensitive. Full Signature: @commands.command() @commands.bot_has_permissions(read_message_history = True, add_reactions = True, send_messages = True) async def help(self, ctx, categoryOrcommand = ): Simplified Signature: help [category/command] Parameters: category/command : The category's name or the command's name or the command's aliases. Examples: Example 1: $help Core Example 2: $help info Example 3: $help Expected Output: Example 1: an embed with reactions to navigate Example 2: an embed with information Example 3: an embed with reactions to select","title":"help"},{"location":"commands/core/#help-all","text":"Show help about the bot, a command, or a category. Note: command name and category name is case sensitive; Core is different from core. Full Signature: # Doesn't exist Simplified Signature: help-all [category/command] Parameters: category/command : The category's name or the command's name or the command's aliases. Examples: Example 1: $help-all Core Example 2: $help-all info Example 3: $help-all Expected Output: Example 1: an embed with information Example 2: an embed with information Example 3: an embed with information","title":"help-all"},{"location":"commands/core/#info","text":"Provide information about the bot. Full Signature: @commands.command(aliases = [ about ]) @commands.bot_has_permissions(send_messages = True) async def info(self, ctx): Simplified Signature: info Example: $info Expected Output: an embed with information","title":"info"},{"location":"commands/core/#note","text":"Provide syntax convention for help and help-all . All it does is putting a link to this documentation. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def note(self, ctx): Simplified Signature: note Example: note Expected Output: an embed with a link","title":"note"},{"location":"commands/core/#prefix-deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. View and set the prefix for the bot. Full Signature: @commands.command() @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def prefix(self, ctx, new_prefix : str = None): Simplified Signature: prefix [new_prefix] Parameters: new_prefix : The new prefix for the bot. I recommend to set it 1-4 characters with no spaces. Example: $prefix ! Expected Output: New prefix: !","title":"prefix [DEPRECATED]"},{"location":"commands/core/#profile","text":"Provide information about you or another member. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def profile(self, ctx, member: discord.Member = None): Simplified Signature: profile [member] Parameter: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] Examples: Example 1: $profile 472832990012243969 (recommended if you turn Developer Mode) Example 2: $profile MikeJollie#1067 (recommended for normal uses) Example 3: $profile Expected Output: an embed with information","title":"profile"},{"location":"commands/core/#report","text":"Report a bug or suggest new features for the bot. Full Signature: @commands.command() @commands.bot_has_permissions(manage_messages = True, send_messages = True) @commands.cooldown(rate = 1, per = 30.0, type = commands.BucketType.user) async def report(self, ctx, *, content : str): Simplified Signature: report type content Parameters: type : Either report or suggest , based on your need. It is recommended to use the correct label for the report/suggestion to be easily viewed. content : The report/suggestion. Examples: Example 1: $report report The command xyz raise error (full error here...) Example 2: $report suggest The command profile should have this feature (feature here...) Expected Output: Your opinion has been sent.","title":"report"},{"location":"commands/core/#serverinfo","text":"Provide information about the server that invoke the command. Full Signature: @commands.command(aliases = [ server-info ]) @commands.bot_has_permissions(send_messages = True) async def serverinfo(self, ctx): Simplified Signature: serverinfo server-info Example: $serverinfo Expected Output: an embed with information This document is last updated on May 26th (PT) by MikeJollie#1067","title":"serverinfo"},{"location":"commands/dev/","text":"Dev commands These are the commands that are only for the bot developers to use ~~to abuse power~~. is_dev [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a check to see if the invoker is a developer. __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category. cog_check [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if is_dev(ctx.author) and isDM(ctx.channel) , raise CheckFailure() and NoPrivateMessage() respectively. all_guild Display all guilds the bot is in. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def all_guild(self, ctx): Simplified Signature: all_guild Example: $all_guild Expected Output: an embed with information leave_guild Make the bot leave the current invoked guild (so you can save yourself from clicking the kick button). Full Signature: @commands.command() @commands.is_owner() async def leave_guild(self, ctx): Simplified Signature: leave_guild Example: $leave_guild Expected Output: verification steps reload Reload a module. This is extremely useful when you don't want to shut down the bot, but still want the update to arrive Note that by reloading the module, the categories order in help will be changed. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload(self, ctx, name): Simplified Signature: reload module name Example: $reload categories.dev Expected Output: Reloaded extension categories.dev reload_eh [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the reload command. It is currently only response to the ModuleNotFound exception. reload_all_extension Reload all modules. Useful for OCD people (like MikeJollie) because reload will mess up the order in help and help-all . Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload_all_extension(self, ctx): Simplified Signature: reload_all_extension Example: $reload_all_extension Expected Output: Reloaded all extensions. report_response Response to a report/suggestion. Note that the command will look through the last 100 messages in the report channel in the support server. It is recommended not to use this more than once on the same report/suggestion. Full Signature: @commands.command(aliases = [ suggest_response ]) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 60.0, type = commands.BucketType.default) async def report_response(self, ctx, message_ID : int, *, response : str): Simplified Signature: report_response messageID response suggest_response messageID response Parameters: messageID : The message ID of the report. response : The response itself. Example: $report_response 649139994270892033 Nah Expected Output: embed edited reset_all_cooldown Reset all cooldowns on every commands. Full Signature: @commands.command() async def reset_all_cooldown(self, ctx): Simplified Signature: reset_all_cooldown Example: $reset_all_cooldown Expected Output: All cooldown reseted. This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Dev"},{"location":"commands/dev/#dev-commands","text":"These are the commands that are only for the bot developers to use ~~to abuse power~~.","title":"Dev commands"},{"location":"commands/dev/#is_dev-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a check to see if the invoker is a developer.","title":"is_dev [INTERNAL]"},{"location":"commands/dev/#9595init9595-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category.","title":"__init__ [INTERNAL]"},{"location":"commands/dev/#cog_check-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A check that apply to all the command in this category. This check will check if is_dev(ctx.author) and isDM(ctx.channel) , raise CheckFailure() and NoPrivateMessage() respectively.","title":"cog_check [INTERNAL]"},{"location":"commands/dev/#all_guild","text":"Display all guilds the bot is in. Full Signature: @commands.command() @commands.bot_has_permissions(send_messages = True) async def all_guild(self, ctx): Simplified Signature: all_guild Example: $all_guild Expected Output: an embed with information","title":"all_guild"},{"location":"commands/dev/#leave_guild","text":"Make the bot leave the current invoked guild (so you can save yourself from clicking the kick button). Full Signature: @commands.command() @commands.is_owner() async def leave_guild(self, ctx): Simplified Signature: leave_guild Example: $leave_guild Expected Output: verification steps","title":"leave_guild"},{"location":"commands/dev/#reload","text":"Reload a module. This is extremely useful when you don't want to shut down the bot, but still want the update to arrive Note that by reloading the module, the categories order in help will be changed. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload(self, ctx, name): Simplified Signature: reload module name Example: $reload categories.dev Expected Output: Reloaded extension categories.dev","title":"reload"},{"location":"commands/dev/#reload_eh-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the reload command. It is currently only response to the ModuleNotFound exception.","title":"reload_eh [INTERNAL]"},{"location":"commands/dev/#reload_all_extension","text":"Reload all modules. Useful for OCD people (like MikeJollie) because reload will mess up the order in help and help-all . Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 5.0, type = commands.BucketType.default) async def reload_all_extension(self, ctx): Simplified Signature: reload_all_extension Example: $reload_all_extension Expected Output: Reloaded all extensions.","title":"reload_all_extension"},{"location":"commands/dev/#report_response","text":"Response to a report/suggestion. Note that the command will look through the last 100 messages in the report channel in the support server. It is recommended not to use this more than once on the same report/suggestion. Full Signature: @commands.command(aliases = [ suggest_response ]) @commands.bot_has_permissions(send_messages = True) @commands.cooldown(rate = 1, per = 60.0, type = commands.BucketType.default) async def report_response(self, ctx, message_ID : int, *, response : str): Simplified Signature: report_response messageID response suggest_response messageID response Parameters: messageID : The message ID of the report. response : The response itself. Example: $report_response 649139994270892033 Nah Expected Output: embed edited","title":"report_response"},{"location":"commands/dev/#reset95all95cooldown","text":"Reset all cooldowns on every commands. Full Signature: @commands.command() async def reset_all_cooldown(self, ctx): Simplified Signature: reset_all_cooldown Example: $reset_all_cooldown Expected Output: All cooldown reseted. This document is last updated on May 26th (PT) by MikeJollie#1067","title":"reset_all_cooldown"},{"location":"commands/events/","text":"Bot events This section is intentionally left empty due to a full rewrite in near future. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"Bot events"},{"location":"commands/events/#bot-events","text":"This section is intentionally left empty due to a full rewrite in near future. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"Bot events"},{"location":"commands/experiment/","text":"Experiment commands [DEPRECATED] This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. This document is lasted reviewed on April 23rd (PT) by MikeJollie#1067","title":"Experiment"},{"location":"commands/experiment/#experiment-commands-deprecated","text":"This section is labeled as [DEPRECATED], which means it's possible to be removed in the future. This document is lasted reviewed on April 23rd (PT) by MikeJollie#1067","title":"Experiment commands [DEPRECATED]"},{"location":"commands/logger/","text":"Logging events Unlike other categories, this categories only contains logging events for the logging feature of a Discord Bot. This category has no commands. If you're looking for setting up a logging channel/welcome channel/..., refers to page Settings . This section will be reformatted in near future. Table of Contents Specification [INTERNAL] __init__ [INTERNAL] log_check [INTERNAL] role_dpyperms_to_dperms [INTERNAL] channel_dpyperms_to_dperms [INTERNAL] on_message_delete on_bulk_message_delete [DEVELOPING] on_raw_message_edit on_message_edit on_member_ban on_member_unban on_member_join on_member_leave on_member_update on_guild_channel_create on_guild_channel_delete on_guild_channel_update on_guild_update on_guild_role_create on_guild_role_delete on_guild_role_update command_error Specification [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a set of format that the developers must follow while writing events for consistency. Any changes that does not follow this specification will be denied. Full Specification: # Specification: # Every single events here (except raw events) must have the following variables declared at the very first line after checking log: # - log_channel: the channel that's gonna send the embed. Retrieve using gconfig.get_config and config[ LOG_CHANNEL ] # - log_title: the log title that's gonna pass in title in discord.Embed # - log_content: the log content that's gonna pass in description in discord.Embed # - log_color: the color of the embed. It must be self.color_... depend on the current event. # - log_time: the timestamp of the embed. Typically get from entry.created_at. # - Optional(executor): the Member that triggered the event. # Log embed specification: # Every single embed send here (except raw events) must have the following format: # Embed.author as the executor. # Embed.title as log_title. # Embed.description as log_content. # Embed.color as log_color. # Embed.timestamp as log_time. # Embed.footer as the executor. # Optional (Embed.thumbnail) as the target. # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the emoji for the category as \ud83d\udcdd . This also defines the fixed colors for each audit log action. Any changes that does not follow this specification will be denied. Color Specification: # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal self.color_moderation = 0x000000 self.color_warn_mute = discord.Color.red() self.color_change = discord.Color.gold() self.color_delete = discord.Color.orange() self.color_create = discord.Color.green() self.color_guild_join_leave = discord.Color.blue() self.color_other = discord.Color.teal() log_check [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. An internal check if a guild enabled logging feature. It MUST be the first thing to check when writing any events. Full Signature: def log_check(self, guild): Return: True if config[\"ERROR\"] == 0 and config[\"STATUS_LOG\"] == 1 and config[\"LOG_CHANNEL\"] != 0 False otherwise. role_dpyperms_to_dperms [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a role permission to the text. Full Signature: def role_dpyperms_to_dperms(self, role_permissions : str): Return type: str Example: role_dpyperms_to_dperms(\"manage_guild\") - \"Manage Server\" channel_dpyperms_to_dperms [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a channel permission to the text. Full Signature: def channel_dpyperms_to_dperms(self, channel_permissions : str): Return type: str Example: channel_dpyperms_to_dperms(\"manage_channels\") - \"Manage Channels\" on_message_delete An event that is invoked when a message is deleted if the message is in cache . If the message isn't in cache, on_raw_message_delete is invoked instead. If it is a purge, then on_bulk_message_delete is invoked instead. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_message_delete(self, message): Limitation: The deletor does not always display correctly (due to Discord limitation). on_bulk_message_delete [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. on_raw_message_edit An event that is invoked when a message is edited even if the message isn't in cache . If the message is in cache, the event will do nothing and leave the task to on_message_edit . This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_raw_message_edit(self, payload): Limitation: The old content of the message cannot be found. There is a rare chance that the new content of the message cannot be found. on_message_edit An event that is invoked when a message is edited if the message is in cache . If the message isn't in cache, on_raw_message_edit is invoked instead. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_message_edit(self, before, after): Limitation: Does not log embed editing. on_member_ban An event that is invoked when a user/member is banned. The ban action will also invoke on_member_leave if the member is in the guild. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_ban(self, guild, user): Limitation: None on_member_unban An event that is invoked when a user is unbanned. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_unban(self, guild, user): Limitation: None on_member_join An event that is invoked when a user join the guild. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_join(self, member): Limitation: None on_member_leave An event that is invoked when a member leave the guild. This event is also invoked when a member is banned/kicked. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_remove(self, member): Limitation: When a kicked member rejoin and leave, the member will be logged that the member is kicked twice. (unsure) on_member_update An event that is invoked when a member's role changes, a member's status/activity changes, a member's nickname changes or a member is muted/deafened. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_member_update(self, before, after): Limitation: Changes in member's status/activity will not be logged by MichaelBot due to unnecessary spamming. Changes in member is muted/deafened is currently not be logged by MichaelBot due to the unnecessary logging. on_guild_channel_create An event that is invoked when a channel in a guild is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_channel_create(self, channel): Limitation: Does not display bitrate information in VoiceChannel . on_guild_channel_delete An event that is invoked when a channel in a guild is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_channel_delete(self, channel): Limitation: Does not display bitrate information in VoiceChannel . on_guild_channel_update An event that is invoked when a channel in a guild is edited. The edit can be either channel's name, channel's topic, channel's position or channel's permission. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_channel_update(self, before, after): Limitation: Changes in channel's position will not be logged by MichaelBot due to both spamming potential and messy Discord internal channel's position definition. on_guild_update An event that is invoked when the guild itself is edited. The edit can be either guild's name, guild's avatar or guild's owner. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_update(self, before, after): Limitation: Does not log changes in guild's avatar yet. on_guild_role_create An event that is invoked when a role is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_role_create(self, role): Limitation: Information may be logged incorrectly if the role is created by a bot. on_guild_role_delete An event that is invoked when a role is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_role_delete(self, role): Limitation: Requires View Audit Log permission. on_guild_role_update An event that is invoked when a role is edited. The edit can be either role's name changes, role's color changes, role is mentionable changes, role display separately changes or role's permission changes. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_role_update(self, before, after): Limitation: Changes in mentionable and displaying separately for role will not be logged by MichaelBot due to unnecessary logging. command_error A listener that listen to on_command_error and display the error to the logging channel. Full Signature: @commands.Cog.listener( on_command_error ) async def command_error(self, ctx, error): Limitation: Not user-friendly error message (can't change). If the original message has codeblock, the embed will display ugly. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"Logging events"},{"location":"commands/logger/#logging-events","text":"Unlike other categories, this categories only contains logging events for the logging feature of a Discord Bot. This category has no commands. If you're looking for setting up a logging channel/welcome channel/..., refers to page Settings . This section will be reformatted in near future.","title":"Logging events"},{"location":"commands/logger/#table-of-contents","text":"Specification [INTERNAL] __init__ [INTERNAL] log_check [INTERNAL] role_dpyperms_to_dperms [INTERNAL] channel_dpyperms_to_dperms [INTERNAL] on_message_delete on_bulk_message_delete [DEVELOPING] on_raw_message_edit on_message_edit on_member_ban on_member_unban on_member_join on_member_leave on_member_update on_guild_channel_create on_guild_channel_delete on_guild_channel_update on_guild_update on_guild_role_create on_guild_role_delete on_guild_role_update command_error","title":"Table of Contents"},{"location":"commands/logger/#specification-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. This is a set of format that the developers must follow while writing events for consistency. Any changes that does not follow this specification will be denied. Full Specification: # Specification: # Every single events here (except raw events) must have the following variables declared at the very first line after checking log: # - log_channel: the channel that's gonna send the embed. Retrieve using gconfig.get_config and config[ LOG_CHANNEL ] # - log_title: the log title that's gonna pass in title in discord.Embed # - log_content: the log content that's gonna pass in description in discord.Embed # - log_color: the color of the embed. It must be self.color_... depend on the current event. # - log_time: the timestamp of the embed. Typically get from entry.created_at. # - Optional(executor): the Member that triggered the event. # Log embed specification: # Every single embed send here (except raw events) must have the following format: # Embed.author as the executor. # Embed.title as log_title. # Embed.description as log_content. # Embed.color as log_color. # Embed.timestamp as log_time. # Embed.footer as the executor. # Optional (Embed.thumbnail) as the target. # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal","title":"Specification [INTERNAL]"},{"location":"commands/logger/#9595init9595-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the emoji for the category as \ud83d\udcdd . This also defines the fixed colors for each audit log action. Any changes that does not follow this specification will be denied. Color Specification: # Color specification: # Moderation action = Black # Warn / Mute = Red # Change (server change, message change, member change, etc.) = Yellow # Delete (delete message, delete role, delete channel, etc.) = Orange # Create (create channel, create role, etc.) = Green # Join / Leave (server) = Blue # Other = Teal self.color_moderation = 0x000000 self.color_warn_mute = discord.Color.red() self.color_change = discord.Color.gold() self.color_delete = discord.Color.orange() self.color_create = discord.Color.green() self.color_guild_join_leave = discord.Color.blue() self.color_other = discord.Color.teal()","title":"__init__ [INTERNAL]"},{"location":"commands/logger/#log_check-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. An internal check if a guild enabled logging feature. It MUST be the first thing to check when writing any events. Full Signature: def log_check(self, guild): Return: True if config[\"ERROR\"] == 0 and config[\"STATUS_LOG\"] == 1 and config[\"LOG_CHANNEL\"] != 0 False otherwise.","title":"log_check [INTERNAL]"},{"location":"commands/logger/#role95dpyperms95to95dperms-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a role permission to the text. Full Signature: def role_dpyperms_to_dperms(self, role_permissions : str): Return type: str Example: role_dpyperms_to_dperms(\"manage_guild\") - \"Manage Server\"","title":"role_dpyperms_to_dperms [INTERNAL]"},{"location":"commands/logger/#channel95dpyperms95to95dperms-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A utility method to convert a channel permission to the text. Full Signature: def channel_dpyperms_to_dperms(self, channel_permissions : str): Return type: str Example: channel_dpyperms_to_dperms(\"manage_channels\") - \"Manage Channels\"","title":"channel_dpyperms_to_dperms [INTERNAL]"},{"location":"commands/logger/#on95message95delete","text":"An event that is invoked when a message is deleted if the message is in cache . If the message isn't in cache, on_raw_message_delete is invoked instead. If it is a purge, then on_bulk_message_delete is invoked instead. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_message_delete(self, message): Limitation: The deletor does not always display correctly (due to Discord limitation).","title":"on_message_delete"},{"location":"commands/logger/#on95bulk95message95delete-developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing.","title":"on_bulk_message_delete [DEVELOPING]"},{"location":"commands/logger/#on95raw95message95edit","text":"An event that is invoked when a message is edited even if the message isn't in cache . If the message is in cache, the event will do nothing and leave the task to on_message_edit . This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_raw_message_edit(self, payload): Limitation: The old content of the message cannot be found. There is a rare chance that the new content of the message cannot be found.","title":"on_raw_message_edit"},{"location":"commands/logger/#on95message95edit","text":"An event that is invoked when a message is edited if the message is in cache . If the message isn't in cache, on_raw_message_edit is invoked instead. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_message_edit(self, before, after): Limitation: Does not log embed editing.","title":"on_message_edit"},{"location":"commands/logger/#on95member95ban","text":"An event that is invoked when a user/member is banned. The ban action will also invoke on_member_leave if the member is in the guild. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_ban(self, guild, user): Limitation: None","title":"on_member_ban"},{"location":"commands/logger/#on95member95unban","text":"An event that is invoked when a user is unbanned. The color of the embed is black. Full Signature: @commands.Cog.listener() async def on_member_unban(self, guild, user): Limitation: None","title":"on_member_unban"},{"location":"commands/logger/#on95member95join","text":"An event that is invoked when a user join the guild. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_join(self, member): Limitation: None","title":"on_member_join"},{"location":"commands/logger/#on95member95leave","text":"An event that is invoked when a member leave the guild. This event is also invoked when a member is banned/kicked. The color of the embed is blue. Full Signature: @commands.Cog.listener() async def on_member_remove(self, member): Limitation: When a kicked member rejoin and leave, the member will be logged that the member is kicked twice. (unsure)","title":"on_member_leave"},{"location":"commands/logger/#on95member95update","text":"An event that is invoked when a member's role changes, a member's status/activity changes, a member's nickname changes or a member is muted/deafened. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_member_update(self, before, after): Limitation: Changes in member's status/activity will not be logged by MichaelBot due to unnecessary spamming. Changes in member is muted/deafened is currently not be logged by MichaelBot due to the unnecessary logging.","title":"on_member_update"},{"location":"commands/logger/#on95guild95channel95create","text":"An event that is invoked when a channel in a guild is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_channel_create(self, channel): Limitation: Does not display bitrate information in VoiceChannel .","title":"on_guild_channel_create"},{"location":"commands/logger/#on95guild95channel95delete","text":"An event that is invoked when a channel in a guild is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_channel_delete(self, channel): Limitation: Does not display bitrate information in VoiceChannel .","title":"on_guild_channel_delete"},{"location":"commands/logger/#on95guild95channel95update","text":"An event that is invoked when a channel in a guild is edited. The edit can be either channel's name, channel's topic, channel's position or channel's permission. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_channel_update(self, before, after): Limitation: Changes in channel's position will not be logged by MichaelBot due to both spamming potential and messy Discord internal channel's position definition.","title":"on_guild_channel_update"},{"location":"commands/logger/#on95guild95update","text":"An event that is invoked when the guild itself is edited. The edit can be either guild's name, guild's avatar or guild's owner. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_update(self, before, after): Limitation: Does not log changes in guild's avatar yet.","title":"on_guild_update"},{"location":"commands/logger/#on95guild95role95create","text":"An event that is invoked when a role is created. This event falls under create in AuditLogActionCategory . The color of the embed is green. Full Signature: @commands.Cog.listener() async def on_guild_role_create(self, role): Limitation: Information may be logged incorrectly if the role is created by a bot.","title":"on_guild_role_create"},{"location":"commands/logger/#on95guild95role95delete","text":"An event that is invoked when a role is deleted. This event falls under delete in AuditLogActionCategory . The color of the embed is orange. Full Signature: @commands.Cog.listener() async def on_guild_role_delete(self, role): Limitation: Requires View Audit Log permission.","title":"on_guild_role_delete"},{"location":"commands/logger/#on95guild95role95update","text":"An event that is invoked when a role is edited. The edit can be either role's name changes, role's color changes, role is mentionable changes, role display separately changes or role's permission changes. This event falls under update in AuditLogActionCategory . The color of the embed is yellow. Full Signature: @commands.Cog.listener() async def on_guild_role_update(self, before, after): Limitation: Changes in mentionable and displaying separately for role will not be logged by MichaelBot due to unnecessary logging.","title":"on_guild_role_update"},{"location":"commands/logger/#command_error","text":"A listener that listen to on_command_error and display the error to the logging channel. Full Signature: @commands.Cog.listener( on_command_error ) async def command_error(self, ctx, error): Limitation: Not user-friendly error message (can't change). If the original message has codeblock, the embed will display ugly. This document is last updated on April 23rd (PT) by MikeJollie#1067","title":"command_error"},{"location":"commands/moderation/","text":"Moderation commands These are commands that performs moderating action. __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of this category. This set the Moderation category's emoji as \ud83d\udd28 . ban Ban a member out of the server. Note that the bot's role needs to be higher than the member to ban. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def ban(self, ctx, user : discord.Member, *, reason = None): Simplified Signature: ban member [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for banning. Example: $ban MikeJollie Look at too many lolis Expected Output: an embed with verification ban_eh [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. An local error handler for the ban command. It is currently only response to the BadArgument exception, which signify the user is not in the guild cache. hackban Ban a user out of the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def hackban(self, ctx, id : int, *, reason = None): Simplified Signature: hackban ID [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $hackban 472832990012243969 Befriend with too many lolis Expected Output: an embed with verification kick Kick a member out of the server. Note that the bot's role needs to be higher than the member to kick. Full Signature: @commands.command() @commands.has_guild_permissions(kick_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def kick(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: kick member [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for kicking. Example: $kick MikeJollie Being dumb Expected Output: an embed with verification kick_eh [INTERNAL] This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the kick command. It is currently only response to the BadArgument exception, which signify that the member is not in the guild. mute [INCOMPLETE] [DEVELOPING] This section is labeled as [INCOMPLETE], will be updated in the future. This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. Mute a member from chatting. Full Signature: @commands.command(hidden = True, enabled = True) @commands.has_permissions(kick_members = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(1, 5.0, commands.BucketType.guild) async def mute(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: mute member [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for muting. Example: $mute MikeJollie Stop saying \"Loli is justice\" Expected Output: an embed with verification unban Unban a user from the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def unban(self, ctx, id : int, *, reason = None): Simplified Signature: unban ID [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $unban 472832990012243969 You've been trained by the FBI now Expected Output: an embed with verification This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Moderation"},{"location":"commands/moderation/#moderation-commands","text":"These are commands that performs moderating action.","title":"Moderation commands"},{"location":"commands/moderation/#9595init9595-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A constructor of this category. This set the Moderation category's emoji as \ud83d\udd28 .","title":"__init__ [INTERNAL]"},{"location":"commands/moderation/#ban","text":"Ban a member out of the server. Note that the bot's role needs to be higher than the member to ban. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def ban(self, ctx, user : discord.Member, *, reason = None): Simplified Signature: ban member [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for banning. Example: $ban MikeJollie Look at too many lolis Expected Output: an embed with verification","title":"ban"},{"location":"commands/moderation/#ban_eh-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. An local error handler for the ban command. It is currently only response to the BadArgument exception, which signify the user is not in the guild cache.","title":"ban_eh [INTERNAL]"},{"location":"commands/moderation/#hackban","text":"Ban a user out of the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def hackban(self, ctx, id : int, *, reason = None): Simplified Signature: hackban ID [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $hackban 472832990012243969 Befriend with too many lolis Expected Output: an embed with verification","title":"hackban"},{"location":"commands/moderation/#kick","text":"Kick a member out of the server. Note that the bot's role needs to be higher than the member to kick. Full Signature: @commands.command() @commands.has_guild_permissions(kick_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def kick(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: kick member [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for kicking. Example: $kick MikeJollie Being dumb Expected Output: an embed with verification","title":"kick"},{"location":"commands/moderation/#kick_eh-internal","text":"This section is labeled as [INTERNAL], meaning that it is NOT a command. It is here only to serve the developers purpose. A local error handler for the kick command. It is currently only response to the BadArgument exception, which signify that the member is not in the guild.","title":"kick_eh [INTERNAL]"},{"location":"commands/moderation/#mute-incomplete-developing","text":"This section is labeled as [INCOMPLETE], will be updated in the future. This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. Mute a member from chatting. Full Signature: @commands.command(hidden = True, enabled = True) @commands.has_permissions(kick_members = True) @commands.bot_has_guild_permissions(kick_members = True) @commands.cooldown(1, 5.0, commands.BucketType.guild) async def mute(self, ctx, member : discord.Member, *, reason = None): Simplified Signature: mute member [reason] Parameters: member : A Discord member. It can be any in the following form: [ID/discriminator/mention/name/nickname] reason : The reason for muting. Example: $mute MikeJollie Stop saying \"Loli is justice\" Expected Output: an embed with verification","title":"mute [INCOMPLETE] [DEVELOPING]"},{"location":"commands/moderation/#unban","text":"Unban a user from the server. This user does not need to share the server with the bot. Full Signature: @commands.command() @commands.has_guild_permissions(ban_members = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(ban_members = True) @commands.cooldown(rate = 2, per = 5.0, type = commands.BucketType.guild) async def unban(self, ctx, id : int, *, reason = None): Simplified Signature: unban ID [reason] Parameters: id : The id of the user. reason : The reason for banning. Example: $unban 472832990012243969 You've been trained by the FBI now Expected Output: an embed with verification This document is last updated on May 26th (PT) by MikeJollie#1067","title":"unban"},{"location":"commands/music/","text":"Music [DEVELOPING] This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. This document is missing many functions/methods due to the complexity. It is currently only shows the commands. These are commands that play music in voice channel. It is currently support YouTube, SoundCloud, Twitch, Vimeo and Mixer. connect Connect to a voice channel. If the channel is not specified, it'll attempt to join the current voice channel you're in. This command is implicitly called if the user invoke play without the bot inside a voice channel. Full Signature: @commands.command(aliases = [ join ]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def connect(self, ctx, *, channel : discord.VoiceChannel = None): Simplified Signature: connect [voicechannel] join [voicechannel] Parameters: channel : A Discord voice channel. This can be any of the following form: ID/name Example: $connect discord-got-talents Expected Output: No output . play Play the audio provided by the query. More precisely, it streams the audio, because the bot does not download the video. This command implicitly call connect if the user invoke without the bot insdie a voice channel. Full Signature: @commands.command(aliases = ['p']) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.user) async def play(self, ctx, *, query : str): Simplified Signature: play query p query Parameters: query : The resource to play. This can be any of the following form: link/name Example: $play You've been gnomed Expected Output: an embed with information or reactions now_playing Indicate what song is playing. Full Signature: @commands.command(aliases = [ np ]) @commands.bot_has__guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 2, per = 15.0, type = commands.BucketType.user) async def now_playing(self, ctx): Simplified Signature: now_playing np Example: $np Expected Output: an embed with information or reactions pause Pause the currently playing song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def pause(self, ctx): Simplified Signature: pause Example: $pause Expected Output: a vote resume Resume the currently paused song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def resume(self, ctx): Simplified Signature: resume Example: $resume Expected Output: a vote skip Skip the current song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def skip(self, ctx): Simplified Signature: skip Example: $skip Expected Output: a vote stop Stop the player, disconnect and clear the queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [ dc , disconnect ]) @commands.cooldown(rate = 1, per = 15.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def stop(self, ctx): Simplified Signature: stop Example: $stop Expected Output: ` a vote, then the bot disconnects volume Adjust the player's volume. Full Signature: @commands.command(aliases = [ vol ]) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def volume(self, ctx, *, value: int): Simplified Signature: volume value Parameter: value : The value you want the volume to be at. It is in the range 0 to 1000. Example: $vol 100 Expected Output: an embed with verification queue Retrieve a list of current queued songs. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def queue(self, ctx): Simplified Signature: queue Example: $queue Expected Output: an embed with songs shuffle Shuffle the current queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [ mix ]) @commands.cooldown(rate = 2, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def shuffle(self, ctx): Simplified Signature: shuffle Example: $shuffle Expected Output: a vote repeat Repeat the currently played song one more time. Full Signature: @commands.command(aliases = [ loop ]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def repeat(self, ctx): Simplified Signature: repeat Example: $repeat Expected Output: nothing This document is last updated on May 26th (PT) by MikeJollie#1067","title":"Music"},{"location":"commands/music/#music-developing","text":"This section is labeled as [DEVELOPING], which means the function/command is currently under development and not available for testing. This document is missing many functions/methods due to the complexity. It is currently only shows the commands. These are commands that play music in voice channel. It is currently support YouTube, SoundCloud, Twitch, Vimeo and Mixer.","title":"Music [DEVELOPING]"},{"location":"commands/music/#connect","text":"Connect to a voice channel. If the channel is not specified, it'll attempt to join the current voice channel you're in. This command is implicitly called if the user invoke play without the bot inside a voice channel. Full Signature: @commands.command(aliases = [ join ]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def connect(self, ctx, *, channel : discord.VoiceChannel = None): Simplified Signature: connect [voicechannel] join [voicechannel] Parameters: channel : A Discord voice channel. This can be any of the following form: ID/name Example: $connect discord-got-talents Expected Output: No output .","title":"connect"},{"location":"commands/music/#play","text":"Play the audio provided by the query. More precisely, it streams the audio, because the bot does not download the video. This command implicitly call connect if the user invoke without the bot insdie a voice channel. Full Signature: @commands.command(aliases = ['p']) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.user) async def play(self, ctx, *, query : str): Simplified Signature: play query p query Parameters: query : The resource to play. This can be any of the following form: link/name Example: $play You've been gnomed Expected Output: an embed with information or reactions","title":"play"},{"location":"commands/music/#now_playing","text":"Indicate what song is playing. Full Signature: @commands.command(aliases = [ np ]) @commands.bot_has__guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) @commands.cooldown(rate = 2, per = 15.0, type = commands.BucketType.user) async def now_playing(self, ctx): Simplified Signature: now_playing np Example: $np Expected Output: an embed with information or reactions","title":"now_playing"},{"location":"commands/music/#pause","text":"Pause the currently playing song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def pause(self, ctx): Simplified Signature: pause Example: $pause Expected Output: a vote","title":"pause"},{"location":"commands/music/#resume","text":"Resume the currently paused song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def resume(self, ctx): Simplified Signature: resume Example: $resume Expected Output: a vote","title":"resume"},{"location":"commands/music/#skip","text":"Skip the current song. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command() @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def skip(self, ctx): Simplified Signature: skip Example: $skip Expected Output: a vote","title":"skip"},{"location":"commands/music/#stop","text":"Stop the player, disconnect and clear the queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [ dc , disconnect ]) @commands.cooldown(rate = 1, per = 15.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def stop(self, ctx): Simplified Signature: stop Example: $stop Expected Output: ` a vote, then the bot disconnects","title":"stop"},{"location":"commands/music/#volume","text":"Adjust the player's volume. Full Signature: @commands.command(aliases = [ vol ]) @commands.cooldown(rate = 1, per = 2.0, type = commands.BucketType.guild) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def volume(self, ctx, *, value: int): Simplified Signature: volume value Parameter: value : The value you want the volume to be at. It is in the range 0 to 1000. Example: $vol 100 Expected Output: an embed with verification","title":"volume"},{"location":"commands/music/#queue","text":"Retrieve a list of current queued songs. Full Signature: @commands.command() @commands.cooldown(rate = 1, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def queue(self, ctx): Simplified Signature: queue Example: $queue Expected Output: an embed with songs","title":"queue"},{"location":"commands/music/#shuffle","text":"Shuffle the current queue. If there are more than one person in the voice channel, a poll will be created. The admin/DJ reaction will cancel the vote and in favor of that person. Full Signature: @commands.command(aliases = [ mix ]) @commands.cooldown(rate = 2, per = 10.0, type = commands.BucketType.user) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def shuffle(self, ctx): Simplified Signature: shuffle Example: $shuffle Expected Output: a vote","title":"shuffle"},{"location":"commands/music/#repeat","text":"Repeat the currently played song one more time. Full Signature: @commands.command(aliases = [ loop ]) @commands.bot_has_guild_permissions(connect = True, speak = True, add_reactions = True, manage_messages = True, send_messages = True) async def repeat(self, ctx): Simplified Signature: repeat Example: $repeat Expected Output: nothing This document is last updated on May 26th (PT) by MikeJollie#1067","title":"repeat"},{"location":"commands/server/","text":"Settings commands [EXPERIMENT] This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. These are commands that focus in providing Quality of Life for the guild. It comes with logging, welcoming, bad words filtering (new), goodbye (new), reaction roles (new), enabling/disabling a command (new). __init__ [INTERNAL] This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \ud83d\udee0 . log_enable Enable logging in your server. Full Signature: @commands.command(aliases = [ log-enable ]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_enable(self, ctx): Simplified Signature: log_enable log-enable Example: $log_enable Expected Output: a confirm message log_setup Set the logging channel or view which channel is one. This implicitly call log_enable() if you haven't. Full Signature: @commands.command(aliases = [ log-setup ]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_setup(self, ctx, log : discord.TextChannel = None): Simplified Signature: log_setup [channel] log-setup [channel] Parameters: channel : The text channel you want the bot to send logs. By default, it's the current channel the command is invoked in. Examples: Example 1: $log_setup Example 2: $log_setup #mikejollie-is-gay-change-my-mind Expected Output: a verification embed at [channel]","title":"Settings"},{"location":"commands/server/#settings-commands-experiment","text":"This section is labeled as [EXPERIMENT], which means the function/command is currently in internal testing (alpha) and not publicly available. These are commands that focus in providing Quality of Life for the guild. It comes with logging, welcoming, bad words filtering (new), goodbye (new), reaction roles (new), enabling/disabling a command (new).","title":"Settings commands [EXPERIMENT]"},{"location":"commands/server/#9595init9595-internal","text":"This section is labeled as [INTERNAL], meaning that is is NOT a command. It is here only to serve the developers purpose. A constructor of the category. This set the Core category's emoji as \ud83d\udee0 .","title":"__init__ [INTERNAL]"},{"location":"commands/server/#log_enable","text":"Enable logging in your server. Full Signature: @commands.command(aliases = [ log-enable ]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_enable(self, ctx): Simplified Signature: log_enable log-enable Example: $log_enable Expected Output: a confirm message","title":"log_enable"},{"location":"commands/server/#log_setup","text":"Set the logging channel or view which channel is one. This implicitly call log_enable() if you haven't. Full Signature: @commands.command(aliases = [ log-setup ]) @commands.has_guild_permissions(manage_guild = True) @commands.bot_has_permissions(send_messages = True) @commands.bot_has_guild_permissions(view_audit_log = True) @commands.cooldown(rate = 1, per = 3.0, type = commands.BucketType.guild) async def log_setup(self, ctx, log : discord.TextChannel = None): Simplified Signature: log_setup [channel] log-setup [channel] Parameters: channel : The text channel you want the bot to send logs. By default, it's the current channel the command is invoked in. Examples: Example 1: $log_setup Example 2: $log_setup #mikejollie-is-gay-change-my-mind Expected Output: a verification embed at [channel]","title":"log_setup"},{"location":"commands/utility/","text":"","title":"Utility"},{"location":"template/help/","text":"","title":"Help"},{"location":"template/menu/","text":"","title":"Menu"},{"location":"template/paginator/","text":"","title":"Paginator"},{"location":"utilities/methods/","text":"","title":"Utility methods"}]}