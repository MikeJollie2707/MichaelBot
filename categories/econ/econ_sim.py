import loot
import json

def average_loot_value(tool_id: str, world: str, simulation_time: int = 10 ** 6):
    '''Calculate the average value of the loot generated by tools.

    Parameters
    ----------
    tool_id : str
        A valid tool's id.
    world : str
        Either `overworld` or `nether`.
    simulation_time : int, optional
        How many times the loot will be generated, by default 10**6
    '''
    item_cache = {}
    with open("categories/econ/items.json", encoding = 'utf-8') as fin:
        item_data = json.load(fin)
        for item_d in item_data:
            item_cache[item_d["id"]] = item_d
    
    SIMULATION_TIME = simulation_time
    value: int = 0
    
    for _ in range(0, SIMULATION_TIME):
        loot_table = loot.get_activity_loot(tool_id, world)

        for reward in loot_table:
            if reward in ("money", "bonus"):
                value += loot_table[reward]
            else:
                value += item_cache[reward]["sell_price"] * loot_table[reward]
    
    print(f"Sim {SIMULATION_TIME:,} times with the following tool: {tool_id} in {world}")
    print(f"Total value: {value}")
    print(f"Average values: {value / SIMULATION_TIME}")

def tool_simulator(tool_id: str, world: str, simulation_time: int = 10 ** 6):
    '''Simulate an action session.

    Parameters
    ----------
    tool_id : str
        A valid tool id.
    world : str
        Either `overworld` or `nether`.
    simulation_time : int, optional
        How many times the simulation runs, by default 10**6
    '''

    SIMULATION_TIME = simulation_time
    total: int = 0
    rate_tracker: dict[str, int] = {}

    for _ in range(0, SIMULATION_TIME):
        loot_rate = loot.get_activity_loot(tool_id, world)

        for reward in loot_rate:
            if reward not in rate_tracker:
                rate_tracker[reward] = loot_rate[reward]
            else:
                rate_tracker[reward] += loot_rate[reward]
            
            total += loot_rate[reward]

    print(f"Sim {SIMULATION_TIME:,} times, total amount: {total:,}")
    for item, amount in rate_tracker.items():
        print(f"- {item}: {amount:,} / {total:,} ({float(amount) / total * 100 :.5f}%)")

if __name__ == "__main__":
    #average_loot_value("diamond_sword", "nether")
    tool_simulator("diamond_sword", "nether", 10 ** 2)
